#!/usr/bin/python
#
# Tool for processing eSpeak phonemes.
#
# Copyright (C) 2014 Reece H. Dunn
#
# This file is part of cainteoir-engine.
#
# cainteoir-engine is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cainteoir-engine is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cainteoir-engine.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import re
from subprocess import Popen, PIPE

espeak_dir = os.environ['ESPEAK_DIR']
try:
	espeak_data = os.environ['ESPEAK_DATA_DIR']
except:
	espeak_data = os.path.join(espeak_dir, 'espeak-data')

def run(args, input=None):
	p = Popen(args, stdout=PIPE, stderr=PIPE, stdin=PIPE)
	out, err = p.communicate(input=input)
	return out.split('\n')

def read_file(filename, line_comment=None):
	with open(filename) as f:
		for line in f:
			line = line.replace('\n', '')
			if line_comment and line_comment in line:
				data = line.split(line_comment)
				line = data[0]
			if line != '':
				yield line

def read_phonemes(filename):
	language = None
	data = []
	dictionary = re.compile('Dictionary ([a-z]+)_dict  [0-9\-]+')
	for line in read_file(filename):
		m = dictionary.match(line)
		if m:
			if language:
				yield (language, data)
			language = m.group(1)
			data = []
		else:
			data.extend([x for x in line.split() if x != ':'])

def read_voice(filename):
	name = None
	language = None
	dictionary = None
	for line in read_file(filename, line_comment='//'):
		entry = line.split()
		if len(entry) != 0:
			if entry[0] == 'name':
				name = entry[1]
			elif entry[0] == 'language' and not language:
				language = entry[1]
			elif entry[0] == 'dictionary':
				dictionary = entry[1]
	if not dictionary:
		dictionary = language.split('-')[0]
	return { 'name': name, 'language': language, 'dictionary': dictionary }

def read_voices(voice_dir):
	for directory, subdirs, files in os.walk(voice_dir):
		if not os.path.basename(directory) == '!v' and not os.path.basename(directory) == 'mb':
			for voice in files:
				yield (voice, read_voice(os.path.join(directory, voice)))

print 'processing dict_source'
data = dict(read_phonemes(os.path.join(espeak_dir, 'dictsource', 'dict_phonemes')))

print 'processing voices'
voices = dict(read_voices(os.path.join(espeak_data, 'voices')))

print 'generating *.phoneme data'
for language, phonemes in data.items():
	with open(os.path.join('tests', 'phonemeset', 'espeak', '%s.phoneme' % language), 'w') as f:
		f.write('\n'.join(phonemes))

for voice_name, voice in sorted(voices.items()):
	language = voice['language']
	phonemes = data.get(voice['dictionary'])
	if not phonemes:
		print 'skipping %s' % language
		continue

	print 'generating %s.espeak-x data' % language
	with open(os.path.join('tests', 'phonemeset', 'espeak', '%s.espeak-x' % language), 'w') as f:
		for phoneme in phonemes:
			espeak = run(['espeak', '-v', voice['name'], '-q', '-x'], input='[[%s]]' % phoneme)[0]
			espeak = espeak.replace(' ', '') # espeak adds a space before a phoneme block
			espeak = espeak.replace('\'', '') # espeak stresses a single vowel phoneme
			f.write('%s\n' % espeak)

	print 'generating %s.espeak-ipa data' % language
	with open(os.path.join('tests', 'phonemeset', 'espeak', '%s.espeak-ipa' % language), 'w') as f:
		for phoneme in phonemes:
			ipa = run(['espeak', '-v', voice['name'], '-q', '--ipa'], input='[[%s]]' % phoneme)[0]
			ipa = ipa.replace(' ', '') # espeak adds a space before a phoneme block
			ipa = ipa.replace('\xCB\x88', '') # espeak stresses a single vowel phoneme
			f.write('%s\n' % ipa)
