/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2014 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup audio
\{

\struct cainteoir::audio_info
\brief  Provide information about an audio file or device.

\}


\fn    cainteoir::audio_info::~audio_info()
\brief Cleanup the audio object.


\fn    int cainteoir::audio_info::channels() const
\brief Get the number of channels the audio object has.

\return The number of channels the audio object has.


\fn    const rdf::uri &cainteoir::audio_info::format() const
\brief Get the audio sample format of the audio object.

\return The audio sample format of the audio object.


\fn    int cainteoir::audio_info::frequency() const
\brief Get the audio sample frequency of the audio object.

\return The audio sample frequency of the audio object.


\addtogroup audio
\{

\struct cainteoir::audio
\brief  Manage an audio device or file.

\}


\fn    void cainteoir::audio::open()
\brief Opens a connection to the audio device or creates the audio file.


\fn    void cainteoir::audio::close()
\brief Closes the connection to the audio device or file.


\fn    uint32_t cainteoir::audio::write(const char *data, uint43_t len)
\brief Write the specified audio data to the device or file.

\param[in] data The audio data.
\param[in] len  The length of the audio data in bytes.

\return The number of bytes written.


\addtogroup audio
\{

\struct cainteoir::vorbis_comment
\see    http://www.xiph.org/vorbis/doc/v-comment.html
\brief  A vorbis comment.

\}


\var   cainteoir::vorbis_comment::label
\brief The name of the comment, e.g. TITLE.


\var   cainteoir::vorbis_comment::value
\brief The content of the comment, e.g. "Moonlight Sonata".


\addtogroup audio
\{

\fn    std::list<cainteoir::vorbis_comment> cainteoir::vorbis_comments(const rdf::graph &aMetadata, const rdf::uri &aDocument)
\see   http://www.xiph.org/vorbis/doc/v-comment.html
\see   http://wiki.xiph.org/Metadata
\brief Convert an RDF graph to a set of Vorbis Comments.

\param[in] aMetadata The RDF metadata used to create the vorbis comments.
\param[in] aDocument The URI of the document in the RDF graph to convert to vorbis comments.

\return The vorbis comments in (label, value) form for @a aDocument.


\fn    void cainteoir::supportedAudioFormats(rdf::graph &metadata)
\brief Get the audio formats that are supported by libcainteoir.

\param[out] metadata The RDF graph to write the format support to.


\fn    std::shared_ptr<cainteoir::audio> cainteoir::create_audio_file(const char *filename, const char *type, float quality, const rdf::graph &aDocMetadata, const rdf::uri &aDocument, const rdf::uri &aFormat, int aChannels, int aFrequency)
\brief Create an audio file to write data to.

\param[in] filename       The name of the audio file.
\param[in] type           The file type (currently either 'wav' or 'ogg').
\param[in] quality        The encoding quality to use (for lossy encodings).
\param[in] aDocMetadata   The RDF graph containing the document metadata.
\param[in] aDocument      The subject to use to extract the document metadata.
\param[in] aFormat        The sample format for the file.
\param[in] aChannels      The number of channels the audio file will have.
\param[in] aFrequency     The sample frequency for the file.

\return An audio object associated with the file.

The document metadata is used to create metadata tags on the audio file
(title, author, etc.).


\fn    std::shared_ptr<cainteoir::audio> cainteoir::create_audio_file(const char *filename, const char *type, float quality, const rdf::graph &aDocMetadata, const rdf::uri &aDocument, const rdf::graph &aVoiceMetadata, const rdf::uri &aVoice)
\brief Create an audio file to write data to.

\param[in] filename       The name of the audio file.
\param[in] type           The file type (currently either 'wav' or 'ogg').
\param[in] quality        The encoding quality to use (for lossy encodings).
\param[in] aDocMetadata   The RDF graph containing the document metadata.
\param[in] aDocument      The subject to use to extract the document metadata.
\param[in] aVoiceMetadata The RDF graph containing the voice metadata.
\param[in] aVoice         The subject to use to extract the voice metadata.

\return An audio object associated with the file.

The document metadata is used to create metadata tags on the audio file
(title, author, etc.). The voice metadata is used to determine the number
of channels, frequency and sample format of the audio.


\fn    std::shared_ptr<cainteoir::audio> cainteoir::open_audio_device(const char *device, const rdf::graph &aDocMetadata, const rdf::uri &aDocument, const rdf::uri &aFormat, int aChannels, int aFrequency)
\brief Open an audio device to write data to.

\param[in] device         The name of the audio device.
\param[in] aDocMetadata   The RDF graph containing the document metadata.
\param[in] aDocument      The subject to use to extract the document metadata.
\param[in] aFormat        The sample format for the file.
\param[in] aChannels      The number of channels the audio file will have.
\param[in] aFrequency     The sample frequency for the file.

\return An audio object associated with the device.

The document metadata is used to create metadata tags on the audio device
(title, author, etc.).


\fn    std::shared_ptr<cainteoir::audio> cainteoir::open_audio_device(const char *device, const rdf::graph &aDocMetadata, const rdf::uri &aDocument, const rdf::graph &aVoiceMetadata, const rdf::uri &aVoice)
\brief Open an audio device to write data to.

\param[in] device         The name of the audio device.
\param[in] aDocMetadata   The RDF graph containing the document metadata.
\param[in] aDocument      The subject to use to extract the document metadata.
\param[in] aVoiceMetadata The RDF graph containing the voice metadata.
\param[in] aVoice         The subject to use to extract the voice metadata.

\return An audio object associated with the device.

The document metadata is used to create metadata tags on the audio device
(title, author, etc.). The voice metadata is used to determine the number
of channels, frequency and sample format of the audio.

\}


\addtogroup audio
\{

\struct cainteoir::audio_reader
\brief  Read audio from an audio data object.

\}


\var   cainteoir::audio_reader::data
\brief The audio data read from the audio object.


\fn    cainteoir::audio_reader::audio_reader()
\brief Initialize the audio reader.


\fn    void cainteoir::audio_reader::set_interval(const css::time &start, const css::time &end)
\brief Specify the time range of the audio to read.

\param[in] start The point in the audio object to start reading from.
\param[in] end   The point in the audio object to end reading at.


\fn    void cainteoir::audio_reader::set_target(const std::shared_ptr<cainteoir::audio_info> &info)
\brief Specify the target audio format to use.

\param[in] info  The format to read the data as.


\fn    bool cainteoir::audio_reader::read()
\brief Read the next block of audio.

\retval true  If an audio block was read.
\retval false If an audio block was not read.


\addtogroup audio
\{

\fn    std::shared_ptr<cainteoir::audio_reader> cainteoir::create_media_reader(const std::shared_ptr<cainteoir::buffer> &data)
\brief Create an object that can read audio data.

\param[in] data The audio data buffer to read.

\return An audio playback object.

This encapsulates the ffmpeg/libav logic into an easy to use API that uses the
Cainteoir Engine framework. It is used to implement the Media Overlays
functionality of ePub 3 documents and other things that read audio data.

This API and the associated implementation have no concept of what file
formats are supported. That is entirely dependent on what file formats
ffmpeg/libav is configured with.

For example, to play the test.ogg file you can use:

\code
auto data = cainteoir::make_file_buffer("test.ogg");
auto player = cainteoir::create_media_reader(data);
if (player)
{
	cainteoir::rdf::graph doc;
	cainteoir::rdf::uri   subject;
	auto out = cainteoir::open_audio_device(nullptr, doc, subject,
		player->format(),
		player->channels(),
		player->frequency());

	out->open();
	player->set_target(out);
	while (player->read())
		out->write((const char *)player->data.begin(), player->data.size());
	out->close();
}


\endcode

\}


*/
