/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**

\addtogroup archives
\{

\struct cainteoir::archive
\brief  An interface for extracting documents from an archive file format.

\}


\fn    cainteoir::archive::~archive()
\brief Clean up the archive object.


\fn    const rdf::uri cainteoir::archive::location(const std::string &aFilename, const std::string &aRef) const
\brief Get the location of the specified file (for use in RDF metadata).

\param[in] aFilename The file in the archive to get the location of.
\param[in] aRef      The reference section of the uri to use (for document ids).

\return The uri associated with the file.


\fn    std::shared_ptr<buffer> cainteoir::archive::read(const char *aFilename) const
\brief Get the content of the specified file.

\param[in] aFilename The file in the archive to get the data for.

\return The content of the file.


\fn    const std::list<std::string> &cainteoir::archive::files() const
\brief Get the list of files contained in the archive.

\return The filenames of all the files in the archive.


\addtogroup archives
\{

\fn    std::shared_ptr<cainteoir::archive> cainteoir::create_zip_archive(std::shared_ptr<buffer> aData, const rdf::uri &aSubject)
\brief Create an archive for extracting files in a ZIP file.

\param[in] aData    A buffer containing the zip file contents.
\param[in] aSubject The uri to identify the zip file (its location on disk).

\return An archive object to access the zip file contents.

\}

*/
