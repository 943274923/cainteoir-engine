/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**

\addtogroup document_reader
\{

\enum  cainteoir::events::event_type
\brief The type of the document event.

\}


\var   cainteoir::events::event_type cainteoir::events::begin_context
\brief The start of a rendering context.

\code
  context <context> <parameter>
\endcode


\var   cainteoir::events::event_type cainteoir::events::end_context
\brief The end of a rendering context.

\code
  end
\endcode


\var   cainteoir::events::event_type cainteoir::events::text
\brief Text data.

\code
  text <text>
\endcode


\var   cainteoir::events::event_type cainteoir::events::toc_entry
\brief An entry in the table of contents.

The parameter is the depth of the entry. This corresponds to the depth from the
heading rendering context.

\code
  toc-entry <parameter> <anchor> <text>
\endcode


\var   cainteoir::events::event_type cainteoir::events::anchor
\brief An anchor point in the document.

The anchor corresponds to the associated toc-entry.

\code
  anchor <anchor>
\endcode


\addtogroup document_reader
\{

\struct cainteoir::document_item
\brief Holds information about a part of a document.

Objects of this type are created by instances of the document_reader interface.

\}


\fn    cainteoir::document_item::document_item()
\brief Initialize the document item object.


\var   uint32_t cainteoir::document_item::type
\see   cainteoir::events::event_type
\brief The type of the event.


\var   const cainteoir::css::styles *cainteoir::document_item::styles
\brief The \ref css "CSS" styles associated with this document item.


\var   std::shared_ptr<cainteoir::buffer> cainteoir::document_item::content
\brief The text or audio data associated with the document event.


\var   cainteoir::rdf::uri cainteoir::document_item::anchor
\brief A uri that references the start of this event.


\addtogroup document_reader
\{

\struct cainteoir::document
\brief  Stores the text from a document.


\struct cainteoir::document_reader
\brief  Provides a reader-style API to the events corresponding to the document.

\}


\fn    cainteoir::document_reader::~document_reader()
\brief Destroy the document reader object.


\fn    bool cainteoir::document_reader::read()
\brief Read the next event in the document.

\retval true  If an event was read.
\retval false If there are no more events in the document.


\addtogroup document_reader
\{

\enum  cainteoir::capability_types
\brief The capabilities provided by different document types.

\}


\var   cainteoir::capability_types cainteoir::metadata_support
\brief The document type provides metadata information that can be extracted.


\var   cainteoir::capability_types cainteoir::text_support
\brief The document type contains text that can be extracted.


\addtogroup document_reader
\{

\enum  cainteoir::metadata
\brief The amount of metadata to extract from the document.

\}


\var   cainteoir::metadata cainteoir::metadata::header_only
\brief Only extract the metadata contained in the header section of the document.


\var   cainteoir::metadata cainteoir::metadata::all
\brief Extract all the metadata contained in the document.


\addtogroup document_reader
\{


\fn    void cainteoir::supportedDocumentFormats(rdf::graph &metadata, capability_types capabilities)
\brief Get the document formats that are supported by libcainteoir.

\param[out] metadata     The RDF graph to write the format support to.
\param[in]  capabilities The document capabilities to query for.


\fn    std::shared_ptr<cainteoir::document_reader> cainteoir::createDocumentReader(const char *aFilename, rdf::graph &aPrimaryMetadata, const std::string &aTitle, const char *aDefaultEncoding, metadata aMetadata)
\brief Create a document content reader.

\param[in]  aFilename        The path to the document.
\param[out] aPrimaryMetadata The main metadata that describes the document.
\param[in]  aTitle           The document title to use if none is specified.
\param[in]  aDefaultEncoding The default character encoding to use.
\param[in]  aMetadata        How much metadata to extract.

\return A reader over the document contents, or a null pointer if the document is not supported.

If aFilename is null, the file content is read from stdin.

The top-level ToC entry is determined as follows (in order of preference):
   -  the title specified by the document;
   -  the title specified in aTitle;
   -  the filename of the document.

If aMetadata is metadata::all, document events for the text are not guaranteed
to be produced. This is because the parsers perform a single-pass over the
document and document formats that support this option will scan the entire
document for metadata.


\fn    std::shared_ptr<cainteoir::document_reader> cainteoir::createDocumentReader(std::shared_ptr<buffer> &aData, const rdf::uri &aSubject, rdf::graph &aPrimaryMetadata, const std::string &aTitle, const char *aDefaultEncoding, metadata aMetadata)
\brief Create a document content reader.

\param[in]  aData            The document content.
\param[in]  aSubject         The RDF subject for the document metadata.
\param[out] aPrimaryMetadata The main metadata that describes the document.
\param[in]  aTitle           The document title to use if none is specified.
\param[in]  aDefaultEncoding The default character encoding to use.
\param[in]  aMetadata        How much metadata to extract.

\return A reader over the document contents, or a null pointer if the document is not supported.

The top-level ToC entry is determined as follows (in order of preference):
   -  the title specified by the document;
   -  the title specified in aTitle;
   -  the filename of the document.


\fn    std::shared_ptr<cainteoir::document_reader> cainteoir::createDocumentReader(const cainteoir::document::range_type &aDocumentRange)
\brief Create a document content reader.

\param[in]  aDocumentRange The range of document items to read.

\return A reader over the document item range.

This is used to allow documents that have been parsed into a cainteoir::document
object to be passed to API that consume a cainteoir::document_reader. It also
allows a subset of the document to be used (e.g. between two table of content
entries).

\}

*/
