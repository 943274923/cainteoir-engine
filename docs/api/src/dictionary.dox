/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2014 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup dictionary
\{

\enum  cainteoir::tts::dictionary::entry_type
\brief The type of the associated dictionary entry.

\}


\var   cainteoir::tts::dictionary::entry_type cainteoir::tts::dictionary::no_match
\brief There is no matching entry for the word in the dictionary.


\var   cainteoir::tts::dictionary::entry_type cainteoir::tts::dictionary::say_as
\brief The entry is pronounced as another entry in the dictionary.


\var   cainteoir::tts::dictionary::entry_type cainteoir::tts::dictionary::phonemes
\brief The entry is pronounced by the associated sequence of phonemes.


\addtogroup dictionary
\{

\struct cainteoir::tts::dictionary::entry
\brief  Provides information about a dictionary entry.

\}


\var   entry_type cainteoir::tts::dictionary::entry::type
\brief The type of the dictionary entry.


\var   std::shared_ptr<buffer> cainteoir::tts::dictionary::entry::text
\brief The word to lookup for a cainteoir::tts::dictionary::say_as entry.


\var   std::list<phoneme> cainteoir::tts::dictionary::entry::phonemes
\brief The phonemes for a cainteoir::tts::dictionary::phonemes entry.


\fn    cainteoir::tts::dictionary::entry::entry()
\brief Create a cainteoir::tts::dictionary::no_match entry.


\fn    cainteoir::tts::dictionary::entry::entry(const std::shared_ptr<buffer> &aSayAs)
\brief Create a cainteoir::tts::dictionary::say_as entry.

\param[in] aSayAs The text of the word to pronounce this entry as.


\fn    cainteoir::tts::dictionary::entry::entry(const std::shared_ptr<buffer> &aPhonemes, std::shared_ptr<phoneme_reader> &aPhonemeSet)
\brief Create a cainteoir::tts::dictionary::phonemes entry.

\param[in] aPhonemes   The pronunciation of the entry as a phonetic transciption in the given phonemeset.
\param[in] aPhonemeSet The phonemeset used to read \p aPhonemes.


\addtogroup dictionary
\{

\struct cainteoir::tts::dictionary::key_hash
\brief  Generate the hash of a key_type object.

\}


\fn    std::size_t cainteoir::tts::dictionary::key_hash::operator()(const key_type &a) const
\brief Generate the hash of a key_type object.

\param[in] a The key_type object to hash.

\return The hash of the key_type object.


\addtogroup dictionary
\{

\struct cainteoir::tts::dictionary::key_equals
\brief  Compare two key_type objects for equality.

\}


\fn    bool cainteoir::tts::dictionary::key_equals::operator()(const key_type &a, const key_type &b) const
\brief  Compare two key_type objects for equality.

\param[in] a The first key value to compare.
\param[in] b The second key value to compare.

\retval true  If the key values are equal.
\retval false If the key values are not equal.


\addtogroup dictionary
\{

\class cainteoir::tts::dictionary
\brief Manages a pronunciation dictionary.

\}


\var   std::shared_ptr<buffer> cainteoir::tts::dictionary::key_type
\brief The index type of entries in the dictionary.


\var   std::unordered_map<key_type, key_hash, key_equals> cainteoir::tts::dictionary::storage_type
\brief The type used to store the entries in the dictionary.


\var   storage_type::const_iterator cainteoir::tts::dictionary::const_iterator
\brief Iterate over entries in the dictionary.


\fn    void cainteoir::tts::dictionary::add_entry(const key_type &aWord, const entry &aEntry)
\brief Add or update a dictionary entry.

\param[in] aWord  The word to add to the dictionary.
\param[in] aEntry The pronunciation information for the word to be added.


\fn    const entry &cainteoir::tts::dictionary::lookup(const key_type &aWord) const
\brief Get the pronunciation entry associated with the word.

\param[in] aWord The word to lookup.

\return The pronunciation entry associated with the word.

If \p aWord does not exist in the dictionary, the returned entry has the type of
cainteoir::tts::dictionary::no_match.


\fn    std::size_t cainteoir::tts::dictionary::size() const
\brief Get the number of entries in the dictionary.

\return The number of entries in the dictionary.


\fn    bool cainteoir::tts::dictionary::empty() const
\brief Is the dictionary empty?

\retval true  If the dictionary is empty.
\retval false If the dictionary is not empty.


\fn    const_iterator cainteoir::tts::dictionary::begin() const
\brief Get an iterator to the first entry in the dictionary.

\return An iterator to the first entry in the dictionary.


\fn    const_iterator cainteoir::tts::dictionary::end() const
\brief Get an iterator to one past the last entry in the dictionary.

\return An iterator to one past the last entry in the dictionary.


\fn    const std::list<phoneme> &cainteoir::tts::dictionary::pronounce(const std::shared_ptr<buffer> &aWord)
\brief Get the pronunciation for the word in the dictionary.

\param[in] aWord The word to get the pronunciation for.

\return The list of phonemes that make up the pronunciation of the word.


\addtogroup dictionary
\{

\class cainteoir::tts::dictionary_reader
\brief Parse a pronunciation dictionary file.

\}


\fn    cainteoir::tts::dictionary_reader::~dictionary_reader()
\brief Clean up the dictionary reader object.


\fn    bool cainteoir::tts::dictionary_reader::read()
\brief Read the next entry in the dictionary file.

\retval true  If the next entry was read from the file.
\retval false If there are no more entries in the file.


\var   std::shared_ptr<cainteoir::buffer> cainteoir::tts::dictionary_reader::word
\brief The word of the current entry.


\var   tts::dictionary::entry cainteoir::tts::dictionary_reader::entry
\brief The pronunciation information for the current entry.


\addtogroup dictionary
\{

\class cainteoir::tts::dictionary_formatter
\brief Format dictionary entries in a given file format.

\}


\fn    cainteoir::tts::dictionary_formatter::~dictionary_formatter()
\brief Clean up the dictionary formatter object.


\fn    void cainteoir::tts::dictionary_formatter::write_phoneme_entry(const std::shared_ptr<cainteoir::buffer> &word, std::shared_ptr<tts::phoneme_writer> &writer, const std::list<tts::phoneme> &phonemes, const char *line_separator)
\brief Write a phoneme entry in the given phonemeset.

\param[in] word           The word of the entry being written.
\param[in] writer         The phonemeset to transcribe the phonemes in.
\param[in] phonemes       The pronunciation of \p word being written.
\param[in] line_separator The character(s) to use at the end of each line.


\fn    void cainteoir::tts::dictionary_formatter::write_say_as_entry(const std::shared_ptr<cainteoir::buffer> &word, const std::shared_ptr<cainteoir::buffer> &say_as, const char *line_separator)
\brief Write a say as entry.

\param[in] word           The word of the entry being written.
\param[in] say_as         The word to pronounce \p word as.
\param[in] line_separator The character(s) to use at the end of each line.


\addtogroup dictionary
\{

\fn    std::shared_ptr<dictionary_reader> cainteoir::tts::createCainteoirDictionaryReader(const char *aDictionaryPath)
\brief Read entries from a Cainteoir Dictionary file.

\param[in] aDictionaryPath The location of the dictionary to read.

\return A dictionary_reader object to read the entries in the dictionary file.


\fn    std::shared_ptr<dictionary_formatter> cainteoir::tts::createCainteoirDictionaryFormatter(FILE *out)
\brief Create a formatter to output Cainteoir Dictionary formatted dictionary entries.

\param[in] out The file to write the dictionary to.

\return The formatter to write dictionary entries to.


\fn    std::shared_ptr<dictionary_formatter> cainteoir::tts::createEspeakDictionaryFormatter(FILE *out)
\brief Create a formatter to output eSpeak formatted dictionary entries.

\param[in] out The file to write the dictionary to.

\return The formatter to write dictionary entries to.


\fn    std::shared_ptr<dictionary_formatter> cainteoir::tts::createDictionaryEntryFormatter(FILE *out)
\brief Create a formatter to output dictionary entries to.

\param[in] out The file to write the dictionary to.

\return The formatter to write dictionary entries to.

This outputs entries in the form:

\code
"word" => /phonemes/ [phonemeset]
"word" => "say-as"@Script [say-as]
\endcode


\fn    void cainteoir::tts::formatDictionary(tts::dictionary &dict, std::shared_ptr<dictionary_formatter> &formatter, std::shared_ptr<phoneme_writer> &writer, bool resolve_say_as_entries)
\brief Serialize the entries in the dictionary.

\param[in] dict                   The dictionary containing the entries to serialize.
\param[in] formatter              The format to serialize the entries in.
\param[in] writer                 The phonemeset to transcribe pronunciation entries as.
\param[in] resolve_say_as_entries Should say-as entries be mapped to their associated phoneme entry?


\}

*/
