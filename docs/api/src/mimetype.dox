/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup mime
\{

\struct cainteoir::mime::mimetype
 \brief  Manage a document MIME type with file content detection.

\}


\var   cainteoir::mime::mimetype::name
 \brief The name of this mimetype/content.


\var   cainteoir::mime::mimetype::mime_type
 \brief The primary mimetype string.


\fn    cainteoir::mime::mimetype::mimetype(const char *aName, const char *aMimeType, const void *aInfo)
 \brief Create a MIME type manager object.

 \param[in] aName     The document type name.
 \param[in] aMimeType The primary MIME type string.
 \param[in] aInfo     The internal MIME type detection information.


\fn    bool cainteoir::mime::mimetype::match(const std::shared_ptr<cainteoir::buffer> &data) const
\brief Does the document content match this MIME type?

 \param[in] data The document content to check.

 \retval true  If the content matches this MIME type.
 \retval false If the content does not match this MIME type.


\fn    bool cainteoir::mime::mimetype::match(const std::string &uri, const std::string &name) const
\brief Does the XML namespace match this MIME type?

 \param[in] uri  The URI of the XML namespace.
 \param[in] name The localname of the root XML element.

 \retval true  If the XML namespace matches this MIME type.
 \retval false If the XML namespace does not match this MIME type.


\fn    void cainteoir::mime::mimetype::metadata(rdf::graph &aGraph, const std::string &baseuri, const rdf::uri &type) const
\brief Get the RDF metadata for this MIME type.

 \param[out] aGraph  The RDF graph to write the metadata to.
 \param[in]  baseuri The base URI to use for the RDF subject associated with this MIME type.
 \param[in]  type    The rdf:type of the RDF subject associated with this MIME type.


\addtogroup mime
\{

\var   const cainteoir::mime::mimetype cainteoir::mime::email
\brief Email mbox (mime) document.


\var   const cainteoir::mime::mimetype cainteoir::mime::epub
\brief Electronic publication (ePub) document.


\var   const cainteoir::mime::mimetype cainteoir::mime::gzip
\brief GZIP compressed document.


\var   const cainteoir::mime::mimetype cainteoir::mime::html
\brief HTML document.


\var   const cainteoir::mime::mimetype cainteoir::mime::mhtml
\brief Single-page HTML document.


\var   const cainteoir::mime::mimetype cainteoir::mime::mime
\brief MIME/HTTP/NEWS headers.


\var   const cainteoir::mime::mimetype cainteoir::mime::ncx
\brief Navigation control document.


\var   const cainteoir::mime::mimetype cainteoir::mime::ogg
\brief Ogg/Vorbis audio.


\var   const cainteoir::mime::mimetype cainteoir::mime::opf
\brief Open package format document.


\var   const cainteoir::mime::mimetype cainteoir::mime::pdf
\brief Portable document format.


\var   const cainteoir::mime::mimetype cainteoir::mime::rdfxml
\brief RDF/XML document.


\var   const cainteoir::mime::mimetype cainteoir::mime::rtf
\brief Rich text document.


\var   const cainteoir::mime::mimetype cainteoir::mime::smil
\brief SMIL document.


\var   const cainteoir::mime::mimetype cainteoir::mime::ssml
\brief Speech synthesis markup document.


\var   const cainteoir::mime::mimetype cainteoir::mime::text
\brief Plain text document.


\var   const cainteoir::mime::mimetype cainteoir::mime::wav
\brief Wave audio.


\var   const cainteoir::mime::mimetype cainteoir::mime::xhtml
\brief XHTML document.


\var   const cainteoir::mime::mimetype cainteoir::mime::xml
\brief Extensible markup language document.


\var   const cainteoir::mime::mimetype cainteoir::mime::zip
\brief ZIP (compressed) archive.

\}
*/
