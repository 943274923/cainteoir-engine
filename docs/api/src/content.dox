/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup css_units
\{

\struct cainteoir::css::length
\see    http://www.w3.org/TR/css3-values/#lengths
\brief  Represents a CSS length.

\}


\enum  cainteoir::css::length::type
\brief The units in which the length is specified.


\var   cainteoir::css::length::type cainteoir::css::length::inherit
\brief The length value is inherited from the parent object.


\var   cainteoir::css::length::type cainteoir::css::length::millimeters
\brief The mm unit type.


\var   cainteoir::css::length::type cainteoir::css::length::centimeters
\brief The cm unit type.


\var   cainteoir::css::length::type cainteoir::css::length::inches
\brief The in unit type.


\var   cainteoir::css::length::type cainteoir::css::length::points
\brief The pt unit type.


\var   cainteoir::css::length::type cainteoir::css::length::picas
\brief The pc unit type.


\var   cainteoir::css::length::type cainteoir::css::length::pixels
\brief The px unit type.


\fn    cainteoir::css::length::length()
\brief Create a default valued length object.


\fn    cainteoir::css::length::length(float aValue, type aUnits)
\brief Create a length object.

\param[in] aValue The size of the length.
\param[in] aUnits The units the length is specified in.


\fn    cainteoir::css::length cainteoir::css::length::as(const type aUnits) const
\brief Convert the length to the specified units.

\param[in] aUnits The units to convert to.

\return A new length object in the specified units.


\fn    cainteoir::css::length::type cainteoir::css::length::units() const
\brief Gets the units the length is specified in.

\return The units the length is specified in.


\fn    float cainteoir::css::length::value() const
\brief Gets the scalar value of the length.

\return The scalar value of the length.


\addtogroup css
\{

\struct cainteoir::css::box
\brief  Represents a CSS rectangle.


\}


\var   cainteoir::css::length cainteoir::css::box::left
\brief The left edge.


\var   cainteoir::css::length cainteoir::css::box::top
\brief The top edge.


\var   cainteoir::css::length cainteoir::css::box::right
\brief The right edge.


\var   cainteoir::css::length cainteoir::css::box::bottom
\brief The bottom edge.


\addtogroup css_counter_styles
\{

\enum  cainteoir::css::counter_system
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-system
\brief The algorithm used to construct the counter's representation.

\}


\var   cainteoir::css::counter_system cainteoir::css::counter_system::cyclic
\see   http://www.w3.org/TR/css-counter-styles-3/#cyclic-system
\brief Repeatedly cycles through the specified symbols.


\var   cainteoir::css::counter_system cainteoir::css::counter_system::fixed
\see   http://www.w3.org/TR/css-counter-styles-3/#fixed-system
\brief Runs through the symbols once, then falls back.


\var   cainteoir::css::counter_system cainteoir::css::counter_system::symbolic
\see   http://www.w3.org/TR/css-counter-styles-3/#symbolic-system
\brief As cyclic, but doubles, triples, etc. the symbols on each pass.


\var   cainteoir::css::counter_system cainteoir::css::counter_system::alphabetic
\see   http://www.w3.org/TR/css-counter-styles-3/#alphabetic-system
\brief As with numeric, but using an alphabet instead of numeric digits.


\var   cainteoir::css::counter_system cainteoir::css::counter_system::numeric
\see   http://www.w3.org/TR/css-counter-styles-3/#numeric-system
\brief Interprets the symbols as digits to a place value numbering system.


\var   cainteoir::css::counter_system cainteoir::css::counter_system::additive
\see   http://www.w3.org/TR/css-counter-styles-3/#additive-system
\brief Uses a combination of symbols where their sum is the counter value.


\addtogroup css_counter_styles
\{

\struct cainteoir::css::counter_style
\see    http://www.w3.org/TR/css-counter-styles-3/#the-csscounterstylerule-interface
\brief  Represents a \@counter-style CSS rule.

\}


\typedef int cainteoir::css::counter_style::value_t
\brief   The type used for counter values.


\typedef std::pair<value_t, value_t> cainteoir::css::counter_style::range_t
\brief The type used to specify counter ranges.


\var   cainteoir::css::counter_system cainteoir::css::counter_style::system
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-system
\brief The algorithm to use to format the counter value.


\var   int cainteoir::css::counter_style::initial_symbol_value
\see   http://www.w3.org/TR/css-counter-styles-3/#fixed-system
\brief The value of the first symbol (for the fixed system).


\var   std::vector<std::string> cainteoir::css::counter_style::symbols
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-symbols
\brief The set of symbols to use for non-additive systems.


\var   std::vector< std::pair<value_t, std::string> > cainteoir::css::counter_style::additive_symbols
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-symbols
\brief The set of symbols to use for the additive system.


\var   std::string cainteoir::css::counter_style::negative_prefix
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-negative
\brief The string to use to denote negative numbers (before the number).


\var   std::string cainteoir::css::counter_style::negative_suffix
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-negative
\brief The string to use to denote negative numbers (after the number).


\var   std::string cainteoir::css::counter_style::prefix
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-prefix
\brief The string to use at the start of the formatted counter value.


\var   std::string cainteoir::css::counter_style::suffix
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-suffix
\brief The string to use at the end of the formatted counter value.


\var   cainteoir::css::counter_style::range_t cainteoir::css::counter_style::range
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-range
\brief Defines the range over which the counter style is defined.


\var   const cainteoir::css::counter_style *cainteoir::css::counter_style::fallback
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-fallback
\brief The counter to use when this counter cannot represent a value.


\var   const cainteoir::css::counter_style::range_t cainteoir::css::counter_style::infinite
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-range
\brief The value for the 'infinite infinite' range.


\fn    const range_t cainteoir::css::counter_style::get_auto_range(counter_system system)
\brief The range to use for auto ranges based on the counter system.
\see   http://www.w3.org/TR/css-counter-styles-3/#counter-style-range

\param system The counter system to get the auto range for.
\return       The range to use for the auto range.


\fn    cainteoir::css::counter_style::counter_style()
\brief Construct a counter style with default values.


\fn    std::string cainteoir::css::counter_style::marker(value_t count) const
\brief Format a count value using the counter style.

\param count The numeric value of the counter to format.
\return      The formatted value.

*/
