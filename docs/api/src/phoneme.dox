/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2013-2014 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**

\addtogroup phonetic_transcription
\{

\class cainteoir::tts::phoneme_error
\brief Indicates an error when reading/writing phonetic transcriptions.

\}


\fn    cainteoir::tts::phoneme_error::phoneme_error(const std::string &msg)
\brief Create an instance of the exception.

\param msg The error message associated with this exception.


\addtogroup phonetic_transcription
\{

\class cainteoir::tts::phoneme_parser
\brief Parse phonemes in a phonetic transcriptions.

\}


\fn    bool cainteoir::tts::phoneme_parser::parse(const char * &aCurrent, const char *aEnd, ipa::phoneme &aPhoneme)
\brief Read the next entry in the content buffer.

\param[in,out] aCurrent The current position in the content buffer.
\param[in]     aEnd     The end of the content buffer.
\param[out]    aPhoneme The phoneme that was parsed.

\retval true If an entry was read.
\retval false If there are no more entries in the content buffer.


\fn    cainteoir::tts::phoneme_parser::~phoneme_parser()
\brief Clean up the phoneme parser.


\addtogroup phonetic_transcription
\{

\struct cainteoir::tts::phoneme_reader
\brief  Support reading phonemes in a given transcription scheme.

For example:

\code
auto scheme = cainteoir::tts::createPhonemeReader("features");
scheme->reset(std::make_shared<cainteoir::buffer>("{vcd,alv,stp}"));
while (scheme->read())
{
	cainteoir::tts::phoneme p = *scheme;
	// Do something with `p`.
}
\endcode


\}


\fn    cainteoir::tts::phoneme_reader::~phoneme_reader()
\brief Cleans up the data associated with the phoneme reader.


\fn    void cainteoir::tts::phoneme_reader::reset(const std::shared_ptr<buffer> &aBuffer)
\brief Read phonemes from the specified data buffer.

\param aBuffer The text buffer containing the phonemes to read from.

This will reset the phoneme reader so that it will read phonemes from the new
data buffer. It will lose any state from reading the current buffer.


\fn    bool cainteoir::tts::phoneme_reader::read()
\brief Read the next phoneme.

\retval true  If a phoneme was read.
\retval false If a phoneme was not read.


\addtogroup phonetic_transcription
\{

\fn    std::shared_ptr<phoneme_reader> cainteoir::tts::createPhonemeReader(const char *aPhonemeSet)
\brief Create a phoneme reader using the specified transcription scheme.

\param aPhonemeSet The name of the phoneme set (transcription scheme) to load.

Transcription schemes other than \c features are loaded from the <code>.phon</code>
file with the same name in the \c phonemeset sub-directory of the
cainteoir-engine data directory.


\struct cainteoir::tts::phoneme_writer
\brief  Support writing phonemes in a given transcription scheme.

For example:

\code
auto scheme = cainteoir::tts::createPhonemeWriter("features");
scheme->reset(stdout);
for (auto phoneme : { ... })
	scheme->write(phoneme);
\endcode

\}


\fn    cainteoir::tts::phoneme_writer::~phoneme_writer()
\brief Cleans up the data associated with the phoneme writer.


\fn    void cainteoir::tts::phoneme_writer::reset(FILE *aOutput)
\brief Set the file object to write the phonemes to.

\param aOutput The file object to write the phonemes to.


\fn    bool cainteoir::tts::phoneme_writer::write(const phoneme &aPhoneme)
\brief Writes the phoneme to the selected file.

\param aPhoneme The phoneme to write.

\retval true  If the phoneme exists in the transcription scheme and was written to the file.
\retval false If the phoneme does not exist in this transcription scheme.


\fn    const char *cainteoir::tts::phoneme_writer::name() const
\brief Get the name of the phonemeset the writer transcribes phonemes as.

\return The name of the phonemeset associated with the writer.


\addtogroup phonetic_transcription
\{

\fn    std::shared_ptr<phoneme_writer> cainteoir::tts::createPhonemeWriter(const char *aPhonemeSet)
\brief Create a phoneme writer using the specified transcription scheme.

\param aPhonemeSet The name of the phoneme set (transcription scheme) to load.

Transcription schemes other than \c features are loaded from the <code>.phon</code>
file with the same name in the \c phonemeset sub-directory of the
cainteoir-engine data directory.

\}

\addtogroup phoneme
\{

\enum  cainteoir::tts::stress_type
\brief Where stress features should be placed.

\}


\var   cainteoir::tts::stress_type cainteoir::tts::stress_type::as_transcribed
\brief The stress features should not be modified.


\var   cainteoir::tts::stress_type cainteoir::tts::stress_type::vowel
\brief The stress features should be placed on stressed vowels.


\var   cainteoir::tts::stress_type cainteoir::tts::stress_type::syllable
\brief The stress features should be placed on syllable boundaries.


\addtogroup phoneme
\{

\fn    void cainteoir::tts::make_stressed(std::list<phoneme> &aPhonemes, cainteoir::tts::stress_type aType)
\brief Adjust the stress feature placement.

\param[in] aPhonemes The phoneme sequence to adjust the stress feature placement of.
\param[in] aType     The stress placement to adjust to.

\}


*/
