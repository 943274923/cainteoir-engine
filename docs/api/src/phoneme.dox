/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**

\addtogroup phoneme
\{

\enum  cainteoir::tts::feature
\brief A component of a phoneme that describes how the phoneme is pronounced.
\see   http://www.hpl.hp.com/personal/Evan_Kirshenbaum/IPA/faq.html
\see   http://www.hpl.hp.com/personal/Evan_Kirshenbaum/IPA/ascii-ipa.pdf
\see   http://en.wikipedia.org/wiki/International_Phonetic_Alphabet

This set of features is based on the feature set defined in the Feature
Abbreviation (appendix A) section of Kirshenbaum's ASCII-IPA document. It has
several additional feature abbreviations to support describing all IPA
phonemes.

The \b ctl (central) and \b orl (oral) features are not used as these are not
needed to describe a phoneme.

\}

\var   cainteoir::tts::feature cainteoir::tts::unspecified
\brief A feature is not specified.

\var   cainteoir::tts::feature cainteoir::tts::voiced
\brief \b vcd

The vocal chords vibrate during the production of the phoneme.

\var   cainteoir::tts::feature cainteoir::tts::voiceless
\brief \b vls

The vocal chords do not vibrate during the production of the phoneme.

\var   cainteoir::tts::feature cainteoir::tts::bilabial
\brief \b blb

The articulation occurs with both lips.

\var   cainteoir::tts::feature cainteoir::tts::labio_dental
\brief \b lbd

The articulation occurs with the lower lip and upper teeth.

\var   cainteoir::tts::feature cainteoir::tts::dental
\brief \b dnt

The articulation occurs with the tongue touching the upper teeth.

\var   cainteoir::tts::feature cainteoir::tts::alveolar
\brief \b alv

The articulation occurs with the tongue against the alveolar ridge.

\var   cainteoir::tts::feature cainteoir::tts::retroflex
\brief \b rfx

The articulation occurs with the tongue between the alveolar ridge and the hard
palate.

\var   cainteoir::tts::feature cainteoir::tts::palato_alveolar
\brief \b pla

The articulation occurs with the tongue touching the back of the alveolar ridge
and is weakly palatalized.

\var   cainteoir::tts::feature cainteoir::tts::palatal
\brief \b pal

The articulation occurs with the body of the tongue touching the hard palate.

\var   cainteoir::tts::feature cainteoir::tts::velar
\brief \b vel

The articulation occurs with the back of the tongue touching the soft palate
(the velum).

\var   cainteoir::tts::feature cainteoir::tts::uvular
\brief \b uvl

The articulation occurs with the back of the tongue against the uvula.

\var   cainteoir::tts::feature cainteoir::tts::pharyngeal
\brief \b phr

The articulation occurs with the root of the tongue against the pharynx.

\var   cainteoir::tts::feature cainteoir::tts::epiglottal
\brief \b epg

The articulation occurs with the aryepiglottic folds against the epiglottis.

\var   cainteoir::tts::feature cainteoir::tts::glottal
\brief \b glt

The articulation occurs with the glottis.

\var   cainteoir::tts::feature cainteoir::tts::vowel
\brief \b vwl

Identifies a vowel-based phoneme.

\var   cainteoir::tts::feature cainteoir::tts::rising_diphthong
\brief \b dpr

Identifies a diphthong vowel pair which glides from open to close.

\var   cainteoir::tts::feature cainteoir::tts::falling_diphthong
\brief \b dpf

Identifies a diphthong vowel pair which glides from close to open.

\var   cainteoir::tts::feature cainteoir::tts::lateral
\brief \b lat

The airstream moves along the sides of the tongue, but not through the middle
of the mouth.

\var   cainteoir::tts::feature cainteoir::tts::plosive
\brief \b stp

All airflow is blocked, either by the lips, tongue or glottis.

\var   cainteoir::tts::feature cainteoir::tts::fricative
\brief \b frc

The airflow is forced through a narrow gap between two articulators, creating
a turbulant airflow.

\var   cainteoir::tts::feature cainteoir::tts::affricate
\brief \b afr

The onset is plosive, while the release is fricative.

\var   cainteoir::tts::feature cainteoir::tts::nasal
\brief \b nas

The airflow is directed through the nose by lowering the velum.

\var   cainteoir::tts::feature cainteoir::tts::approximant
\brief \b apr

The airflow is forced through a gap between two articulators, but not enough to
create the turbulent airflow of a fricative.

\var   cainteoir::tts::feature cainteoir::tts::trill
\brief \b trl

The sound is created from the vibrations of the articulator agaist the place of
articulation.

\var   cainteoir::tts::feature cainteoir::tts::flap
\brief \b flp

The sound is created with a single contraction of the articulator against the
place of articulation.

\var   cainteoir::tts::feature cainteoir::tts::click
\brief \b clk

The sound is created using the movement of the tongue only.

\var   cainteoir::tts::feature cainteoir::tts::ejective
\brief \b ejc

A voiceless consonant where the glottis is closed.

\var   cainteoir::tts::feature cainteoir::tts::implosive
\brief \b imp

The glottis moves downward while air is expelled from the lungs.

\var   cainteoir::tts::feature cainteoir::tts::high
\brief \b hgh

The tongue is close to the roof of the mouth, without being a consonant.

\var   cainteoir::tts::feature cainteoir::tts::semi_high
\brief \b smh

A high vowel where the tongue is lax (less constricted).

\var   cainteoir::tts::feature cainteoir::tts::upper_mid
\brief \b umd

The tongue is 2/3 between a high and mid vowel.

\var   cainteoir::tts::feature cainteoir::tts::mid
\brief \b mid

The tongue is 1/2 between a low and high vowel.

\var   cainteoir::tts::feature cainteoir::tts::lower_mid
\brief \b lmd

The tongue is 2/3 between a low and mid vowel.

\var   cainteoir::tts::feature cainteoir::tts::semi_low
\brief \b sml

A low vowel where the tongue is lax (more constricted).

\var   cainteoir::tts::feature cainteoir::tts::low
\brief \b low

The tongue is as far from the roof of the mouth as possible.

\var   cainteoir::tts::feature cainteoir::tts::front
\brief \b fnt

The tongue is as far forward as possible, without being a consonant.

\var   cainteoir::tts::feature cainteoir::tts::center
\brief \b cnt

The tongue is 1/2 between a front and back vowel.

\var   cainteoir::tts::feature cainteoir::tts::back
\brief \b bck

The tongue is as far back as possible, without being a consonant.

\var   cainteoir::tts::feature cainteoir::tts::unrounded
\brief \b unr

The lips are relaxed.

\var   cainteoir::tts::feature cainteoir::tts::rounded
\brief \b rnd

The lips form an 'o' shape.

\var   cainteoir::tts::feature cainteoir::tts::primary_stress
\brief \b st1

Indicates that the syllable the phoneme is part of is strongly emphasised.

\var   cainteoir::tts::feature cainteoir::tts::secondary_stress
\brief \b st2

Indicates that the syllable the phoneme is part of is weakly emphasised.

\var   cainteoir::tts::feature cainteoir::tts::syllable_break
\brief \b sbr

Marks the end of one syllable and the start of another.

\var   cainteoir::tts::feature cainteoir::tts::silent_pause
\brief \b pau

This is used to denote the pause between phonemes. This can be combined with
a length specifier to indicate the pause duration:

  -  <code>{pau,est}</code> -- a short pause between words.
  -  <code>{pau}</code>     -- a pause between clauses, e.g. comma.
  -  <code>{pau,hlg}</code> -- a pause between sentences.
  -  <code>{pau,lng}</code> -- an extended pause between sections and chapters.

\var   cainteoir::tts::feature cainteoir::tts::extra_short
\brief \b est

The phoneme (typically a vowel) is articulated for a shorter than normal period
of time.

\var   cainteoir::tts::feature cainteoir::tts::half_long
\brief \b hlg

The phoneme (typically a vowel) is articulated for a slightly extended period
of time.

\var   cainteoir::tts::feature cainteoir::tts::long_
\brief \b lng

The phoneme (typically a vowel) is articulated for an extended period of time.

\var   cainteoir::tts::feature cainteoir::tts::aspirated
\brief \b asp

The release is accompanied by a strong burst of air.

\var   cainteoir::tts::feature cainteoir::tts::unexploded
\brief \b unx

There is no audible release.

\var   cainteoir::tts::feature cainteoir::tts::syllabic
\brief \b syl

The consonant either forms the complete syllable or the nucleus of the syllable.

\var   cainteoir::tts::feature cainteoir::tts::murmured
\brief \b mrm

The vocal chords vibrate, like with voiced consonants, but are opened so that
more air escapes.

\var   cainteoir::tts::feature cainteoir::tts::velarized
\brief \b vzd

Secondary articulation characteristic where the back of the tongue is raised
toward the velum.

\var   cainteoir::tts::feature cainteoir::tts::labialized
\brief \b lzd

The lips form an 'o' shape like with vowels, but this applies to consonants.

\var   cainteoir::tts::feature cainteoir::tts::palatalized
\brief \b pzd

Secondary articulation characteristic where the body of the tongue touches the
hard palate.

\var   cainteoir::tts::feature cainteoir::tts::rhoticized
\brief \b rzd

A rhotic or R-coloured vowel where the frequency of the third formant is lowered.

\var   cainteoir::tts::feature cainteoir::tts::nasalized
\brief \b nzd

Secondary articulation characteristic where the velum is lowered, so some air
escapes through the nose.

\var   cainteoir::tts::feature cainteoir::tts::pharyngealized
\brief \b fzd

Secondary articulation characteristic where the pharynx or epiglottis is
constricted.


\addtogroup phoneme
\{

\fn    std::pair<bool, cainteoir::tts::feature> cainteoir::tts::get_feature_id(const char *abbreviation)
\brief Maps the Kirshenbaum-based feature abbreviation to its associated enumeration value.

\param abbreviation The Kirshenbaum-based feature abbreviation.

\return The associated enumeration value.

The \c bool component of the return value indicates whether the feature abbreviation was found or not. For supported feature abbreviations, the \c feature component of the return value specifies the enumeration value associated with that abbreviation.

This structure is used to support the \b ctl and \b orl feature abbreviations in explicit phoneme transcriptions (e.g. <code>{vcd,alv,orl,stp}</code>) that do not have an associated enumeration value.


\fn    const char *cainteoir::tts::get_feature_abbreviation(const feature f)
\brief Maps the feature enumeration value to its Kirshenbaum-based feature abbreviation.

\param f The feature to get the abbreviation for.

\return The Kirshenbaum-based feature abbreviation.


\fn    const char * cainteoir::tts::get_feature_name(const feature f)
\brief Gets the localized name for the feature.

\param f The feature to get the name of.

\return The localized name of the specified feature.


\class cainteoir::tts::phoneme
\brief Represents an individual unit of sound.
\see   http://en.wikipedia.org/wiki/International_Phonetic_Alphabet

\}


\fn    cainteoir::tts::phoneme::phoneme()
\brief Create a phoneme with no features specified.


\fn    cainteoir::tts::phoneme::phoneme(const feature a, const feature b, const feature c, const feature d, const feature e, const feature f, const feature g, const feature h)
\brief Create a phoneme with the specified feature set.


\fn    bool cainteoir::tts::phoneme::contains(const feature f) const
\brief Checks if the phoneme contains the specified feature.

\param f The feature to check for.

\retval true  If the phoneme contains the specified feature.
\retval false If the phoneme does not contain the specified feature, or the feature is \c unspecified.


\fn    bool cainteoir::tts::phoneme::add(const feature f) const
\brief Add the specified feature to the phoneme.

\param f The feature to add.

\retval true  If the feature was added.
\retval false If the feature was not added.

The \c unspecified feature will not be added, nor will a feature that already
exists. Also, if all of the features are allocated for the phoneme, any other
features will not be added.


\fn    bool cainteoir::tts::phoneme::remove(const feature f) const
\brief Remove the specified feature from the phoneme.

\param f The feature to remove.

\retval true  If the feature was removed.
\retval false If the feature was not removed, or the feature is \c unspecified.


\fn    bool cainteoir::tts::phoneme::operator==(const phoneme &rhs) const
\brief Checks if the two phonemes are equal.

\param rhs The phoneme to compare with.

\retval true  If the phonemes are equal.
\retval false If the phonemes are not equal.

The phonemes are equal if they contain the same number of specified features and
contain the same specified features. The ordering of the features does not matter.


\fn    bool cainteoir::tts::phoneme::operator!=(const phoneme &rhs) const
\brief Checks if the two phonemes are not equal.

\param rhs The phoneme to compare with.

\retval true  If the phonemes are not equal.
\retval false If the phonemes are equal.

The phonemes are equal if they contain the same number of specified features and
contain the same specified features. The ordering of the features does not matter.


\fn    const cainteoir::tts::feature *cainteoir::tts::phoneme::begin() const
\brief Returns an iterator to the first feature in the phoneme.

\return An iterator to the first feature in the phoneme.


\fn    const cainteoir::tts::feature *cainteoir::tts::phoneme::end() const
\brief Returns an iterator to the last feature in the phoneme.

\return An iterator to the last feature in the phoneme.


\addtogroup phonetic_transcription
\{

\class cainteoir::tts::phoneme_error
\brief Indicates an error when reading/writing phonetic transcriptions.

\}


\fn    cainteoir::tts::phoneme_error::phoneme_error(const std::string &msg)
\brief Create an instance of the exception.

\param msg The error message associated with this exception.


\addtogroup phonetic_transcription
\{

\struct cainteoir::tts::phoneme_reader
\brief  Support reading phonemes in a given transcription scheme.

For example:

\code
auto scheme = cainteoir::tts::createExplicitFeaturePhonemeReader();
scheme->reset(std::make_shared<cainteoir::buffer>("{vcd,alv,stp}"));
while (scheme->read())
{
	cainteoir::tts::phoneme p = *scheme;
	// Do something with `p`.
}
\endcode


\}


\fn    cainteoir::tts::phoneme_reader::~phoneme_reader()
\brief Cleans up the data associated with the phoneme reader.


\fn    void cainteoir::tts::phoneme_reader::reset(const std::shared_ptr<buffer> &aBuffer)
\brief Read phonemes from the specified data buffer.

\param aBuffer The text buffer containing the phonemes to read from.

This will reset the phoneme reader so that it will read phonemes from the new
data buffer. It will lose any state from reading the current buffer.


\fn    bool cainteoir::tts::phoneme_reader::read()
\brief Read the next phoneme.

\retval true  If a phoneme was read.
\retval false If a phoneme was not read.


\addtogroup phonetic_transcription
\{

\fn    std::shared_ptr<phoneme_reader> cainteoir::tts::createExplicitFeaturePhonemeReader()
\brief Create a phoneme reader that can read Kirshenbum-style explicit features.
\see   http://www.hpl.hp.com/personal/Evan_Kirshenbaum/IPA/faq.html
\see   http://www.hpl.hp.com/personal/Evan_Kirshenbaum/IPA/ascii-ipa.pdf

\return A new explicit feature phoneme reader.

In the main part of his document on the ASCII-IPA phoneme transcription scheme,
Evan Kirshenbaum describes an explicit representation for phonemes. This is where
each phoneme is specified as a comma-separated list of feature abbreviations
surrounded by curly braces. For example:

\code
{vls,alv,stp}{low,fnt,unr,vwl}{vcd,vel,stp}
\endcode


\fn    std::shared_ptr<phoneme_reader> cainteoir::tts::createPhonemeReader(const char *aPhonemeSet)
\brief Create a phoneme reader using the specified transcription scheme.

\param aPhonemeSet The name of the phoneme set (transcription scheme) to load.

The \c features transcription scheme is the same as using
cainteoir::tts::createExplicitFeaturePhonemeReader.

For the other transcription schemes, they are loaded from the <code>.phon</code>
file with the same name in the \c phonemeset sub-directory of the
cainteoir-engine data directory.


\struct cainteoir::tts::phoneme_writer
\brief  Support writing phonemes in a given transcription scheme.

For example:

\code
auto scheme = cainteoir::tts::createExplicitFeaturePhonemeWriter();
scheme->reset(stdout);
for (auto phoneme : { ... })
	scheme->write(phoneme);
\endcode

\}


\fn    cainteoir::tts::phoneme_writer::~phoneme_writer()
\brief Cleans up the data associated with the phoneme writer.


\fn    void cainteoir::tts::phoneme_writer::reset(FILE *aOutput)
\brief Set the file object to write the phonemes to.

\param aOutput The file object to write the phonemes to.


\fn    bool cainteoir::tts::phoneme_writer::write(const phoneme &aPhoneme)
\brief Writes the phoneme to the selected file.

\param aPhoneme The phoneme to write.

\retval true  If the phoneme exists in the transcription scheme and was written to the file.
\retval false If the phoneme does not exist in this transcription scheme.


\addtogroup phonetic_transcription
\{

\fn    std::shared_ptr<phoneme_writer> cainteoir::tts::createExplicitFeaturePhonemeWriter()
\brief Create a phoneme writer that can write Kirshenbum-style explicit features.
\see   http://www.hpl.hp.com/personal/Evan_Kirshenbaum/IPA/faq.html
\see   http://www.hpl.hp.com/personal/Evan_Kirshenbaum/IPA/ascii-ipa.pdf

\return A new explicit feature phoneme writer.

In the main part of his document on the ASCII-IPA phoneme transcription scheme,
Evan Kirshenbaum describes an explicit representation for phonemes. This is where
each phoneme is specified as a comma-separated list of feature abbreviations
surrounded by curly braces. For example:

\code
{vls,alv,stp}{low,fnt,unr,vwl}{vcd,vel,stp}
\endcode


\fn    std::shared_ptr<phoneme_writer> cainteoir::tts::createPhonemeWriter(const char *aPhonemeSet)
\brief Create a phoneme writer using the specified transcription scheme.

\param aPhonemeSet The name of the phoneme set (transcription scheme) to load.

The \c features transcription scheme is the same as using
cainteoir::tts::createExplicitFeaturePhonemeWriter.

For the other transcription schemes, they are loaded from the <code>.phon</code>
file with the same name in the \c phonemeset sub-directory of the
cainteoir-engine data directory.

\}

*/
