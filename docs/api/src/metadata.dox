/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup rdf
\{

\struct cainteoir::rdf::resource
\brief  Manages an RDF resource.

\}


\fn    cainteoir::rdf::resource::~resource
\brief Clean up the resource.


\fn    std::shared_ptr<const cainteoir::rdf::resource> cainteoir::rdf::resource::clone()
\brief Create a new instance of this resource object.

\return The new copy of the resource.


\addtogroup rdf
\{

\struct cainteoir::rdf::uri
\brief  Represents an RDF URI resource.

In RDF, a URI is used to locate items that can be described. This includes
subjects (describing information about the item), predicates (describing
the type of connection) and objects (connecting two resources together,
e.g. linking an author to a novel).

\}


\var   std::string cainteoir::rdf::uri::ns
\brief The namespace to which the URI resource belongs.


\var   std::string cainteoir::rdf::uri::ref
\brief The URI reference.


\fn    cainteoir::rdf::uri::uri(const std::string &aNS, const std::string &aRef)
\brief Create a new URI object.

\param[in] aNS  The namespace of the URI.
\param[in] aRef The reference of the URI.


\fn    bool rdf::uri::empty() const
\brief Is the URI empty?

\retval true  If the namespace and reference of the URI are empty.
\retval false If the namespace and reference of the URI are not empty.


\fn    std::string rdf::uri::str() const
\brief Convert the URI to a string.

\return The combined namespace and reference forming the URI.


\addtogroup rdf
\{

\fn    bool cainteoir::rdf::operator==(const cainteoir::rdf::uri &a, const cainteoir::rdf::uri &b)
\brief Compare two URIs for equlity.

\param[in] a The first URI to compare.
\param[in] b The second URI to compare.

\retval true  If the two URIs are equal.
\retval false If the two URIs are not equal.


\fn    bool cainteoir::rdf::operator!=(const cainteoir::rdf::uri &a, const cainteoir::rdf::uri &b)
\brief Compare two URIs for inequlity.

\param[in] a The first URI to compare.
\param[in] b The second URI to compare.

\retval true  If the two URIs are not equal.
\retval false If the two URIs are equal.


\struct cainteoir::rdf::ns
\brief  Manages RDF namespaces used for creating RDF URIs and CURIEs.

\}


\fn    cainteoir::rdf::ns::ns(const std::string &aPrefix, const std::string &aHref)
\brief Create an RDF namespace object.

\param[in] aPrefix The short name by which this namespace is to be known.
\param[in] aHref   The base URI of the namespace.


\fn    cainteoir::rdf::uri cainteoir::rdf::ns::operator()(const std::string &aRef) const
\brief Create a URI in the namespace.

\param aRef The URI reference relative to the namespace.


\addtogroup rdf
\{

\fn    bool cainteoir::rdf::operator==(const std::string &a, const cainteoir::rdf::ns &b)
\brief Check if a URI is referenced by a namespace.

\param[in] a The URI to check for.
\param[in] b The namespace to compare against.

\retval true  If the namespace is for the specified URI.
\retval false If the namespace is not for the specified URI.

This comparison will ignore the prefix of the namespace.


\fn    bool cainteoir::rdf::operator==(const cainteoir::rdf::ns &a, const std::string &b)
\brief Check if a URI is referenced by a namespace.

\param[in] a The namespace to compare against.
\param[in] b The URI to check for.

\retval true  If the namespace is for the specified URI.
\retval false If the namespace is not for the specified URI.

This comparison will ignore the prefix of the namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::bnode
\brief RDF blank node.

\}

\addtogroup rdfns
\{

\var   const cainteoir::rdf::ns cainteoir::rdf::dc
\brief Dublin Core: Elements namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::dcam
\brief DCMI Abstract Model namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::dcterms
\brief Dublin Core: Terms namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::dtb
\brief Daisy Talking Book (DTB) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::epub
\brief ePub 3.0 (OPS) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::foaf
\brief Friend of a Friend (FOAF) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::iana
\brief IANA Language Subtag Repository RDF schema namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::marc
\brief MARC namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::media
\brief ePub 3.0 media overlay vocabulary namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::ncx
\brief Navigation Control File (NCX) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::ocf
\brief Open Publication Format (OPF) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::onix
\brief ONIX namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::opf
\brief Open Container Format (OCF) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::owl
\brief OWL Ontology namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::pkg
\brief ePub 3.0 package vocabulary namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::rdf
\brief RDF syntax namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::rdfa
\brief RDF attributes (RDFa) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::rdfs
\brief RDF schema namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::skos
\brief SKOS namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::smil
\brief SMIL namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::ssml
\brief Speech Synthesis Markup Language (SSML) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::subtag
\brief IANA Language Subtag Repository RDF namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::tts
\brief Cainteoir Text-to-Speech RDF namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::xhtml
\brief XML-based HyperText Markup Language (XHTML) namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::xml
\brief XML namespace.


\var   const cainteoir::rdf::ns cainteoir::rdf::xsd
\brief XMLSchema namespace.

\}

\addtogroup rdf
\{

\class cainteoir::rdf::literal
\brief Manages an RDF literal resource.

An RDF literal is a string of characters that may also have an associated
language or datatype. A literal can only be used as the object of an RDF
triple.

\}


\var   cainteoir::rdf::literal::value
\brief The content of the literal.


\var   cainteoir::rdf::literal::language
\brief The language the literal is written in.


\var   cainteoir::rdf::literal::type
\brief The datatype of the literal.


\fn    cainteoir::rdf::literal::literal()
\brief Create an empty literal resource.


\fn    cainteoir::rdf::literal::literal(const T &aValue)
\brief Create a value literal resource.

\param[in] aValue The value to store in the literal.


\fn    cainteoir::rdf::literal::literal(const T &aValue, const std::string &aLanguage)
\brief Create a language literal resource.

\param[in] aValue    The value to store in the literal.
\param[in] aLanguage The language \a aValue is written in.


\fn    cainteoir::rdf::literal::literal(const T &aValue, const cainteoir::rdf::uri &aType)
\brief Create a datatype literal resource.

\param[in] aValue The value to store in the literal.
\param[in] aType  The datatype of \a aValue.


\fn    cainteoir::rdf::literal &cainteoir::rdf::literal::operator=(const T &aValue)
\brief Assign a new value to the literal resource.

\param[in] aValue The value to store in the literal.

\return The new literal object.

If the literal has a language or datatype set, this will preserve those values.


\fn    T cainteoir::rdf::literal::as()
\brief Convert the value of the literal to the specified type.

\return The value of the literal.


\addtogroup rdf
\{

\fn    bool cainteoir::rdf::operator==(const cainteoir::rdf::literal &lhs, const cainteoir::rdf::literal &rhs)
\brief Compare two literals for equlity.

\param[in] lhs The first literal to compare.
\param[in] rhs The second literal to compare.

\retval true  If the two literals are equal.
\retval false If the two literals are not equal.


\struct cainteoir::rdf::triple
\brief  An RDF triple.

A triple in RDF is a (subject, predicate, object) statement that describes
a relation in the RDF graph.

\}


\var   const cainteoir::rdf::uri cainteoir::rdf::triple::subject
\brief The URI this statement is about.


\var   const cainteoir::rdf::uri cainteoir::rdf::triple::predicate
\brief The URI describing the relationship expressed by this statement.


\var   const std::shared_ptr<const cainteoir::rdf::resource> cainteoir::rdf::triple::object
\brief The URI or literal which is the value of this statement.


\fn    cainteoir::rdf::triple::triple(const cainteoir::rdf::uri &aSubject, const cainteoir::rdf::uri &aPredicate, cont std::shared_ptr<const cainteoir::rdf::uri> &aObject)
\brief Create an RDF triple.

\param[in] aSubject   The subject of the triple.
\param[in] aPredicate The predicate of the triple.
\param[in] aObject    The object of the triple.

A triple in RDF is a (subject, predicate, object) statement that describes
a relation in the RDF graph.


\addtogroup rdf_selectors
\{

\var   const cainteoir::rdf::query::detail::subject_t cainteoir::rdf::query::subject
\brief Extract the subject of the RDF triple.


\var   const cainteoir::rdf::query::detail::predicate_t cainteoir::rdf::query::predicate
\brief Extract the predicate of the RDF triple.


\var   const cainteoir::rdf::query::detail::object_t cainteoir::rdf::query::object
\brief Extract the object of the RDF triple.


\fn    const std::string &cainteoir::rdf::query::value(const std::shared_ptr<const rdf::triple> &statement)
\brief Extract the object literal's value of the RDF triple.

\param[in] statement The RDF triple.

\return The object literal's value. If the object is a URI resource, an empty string is returned.

\}
\addtogroup rdf_query
\{

\typedef std::list<std::shared_ptr<const cainteoir::rdf::triple> > cainteoir::rdf::query::results
\brief   The set of RDF triples matching a select query.

\}
\addtogroup rdf
\{

\struct cainteoir::rdf::triplestore
\brief  Hold a set of RDF triples in an RDF graph.

\}


\fn    void cainteoir::rdf::triplestore::push_back(const_reference item)
\brief Add an RDF triple to the triplestore.

\param[in] item The RDF triple to add to the triplestore.


\fn    cainteoir::rdf::query::results &cainteoir::rdf::triplestore::subject(const cainteoir::rdf::uri &s) const
\brief Locate the RDF triples for the specified subject.

\param[in] s The subject of the RDF triples to select.

\return The RDF triples matching the subject.

This method provides an optimized path for select(subject, _, _) queries to
avoid O(N^2) performance when those queries are used in a loop over a set of
subjects.


\addtogroup rdf
\{

\struct cainteoir::rdf::graph
\brief  Manages an RDF graph.

\}


\typedef cainteoir::rdf::triplestore::size_type cainteoir::rdf::graph::size_type
\brief   The type used to hold size values.


\typedef cainteoir::rdf::triplestore::const_iterator cainteoir::rdf::graph::const_iterator
\brief   An iterator over RDF triples.


\typedef cainteoir::rdf::triplestore::const_reference cainteoir::rdf::graph::const_reference
\brief   A reference to an RDF triple.


\fn    rdf::graph::graph()
\brief Create a new RDF graph object.


\fn    cainteoir::rdf::graph::size_type cainteoir::rdf::graph::size() const
\brief Get the number of triples in the graph.

\return The number of triples in the graph.


\fn    bool cainteoir::rdf::graph::empty() const
\brief Is the graph empty?

\retval true  If the graph does not contain any triple statements.
\retval false If the graph does contain triple statements.


\fn    cainteoir::rdf::graph::const_iterator cainteoir::rdf::graph::begin() const
\brief Get the iterator to the first triple in the graph's triplestore.

\return The iterator to the first triple in the graph's triplestore.


\fn    cainteoir::rdf::graph::const_iterator cainteoir::rdf::graph::end() const
\brief Get the iterator to the last triple in the graph's triplestore.

\return The iterator to the last triple in the graph's triplestore.


\fn    cainteoir::rdf::graph::const_reference cainteoir::rdf::graph::front() const
\brief Get the first triple in the graph's triplestore.

\return The first triple in the graph's triplestore.


\fn    cainteoir::rdf::graph::const_reference cainteoir::rdf::graph::back() const
\brief Get the last triple in the graph's triplestore.

\return The last triple in the graph's triplestore.


\fn    cainteoir::rdf::query::results &cainteoir::rdf::graph::subject(const cainteoir::rdf::uri &s) const
\brief Locate the RDF triples for the specified subject.

\param[in] s The subject of the RDF triples to select.

\return The RDF triples matching the subject.

This method provides an optimized path for select(subject, _, _) queries to
avoid O(N^2) performance when those queries are used in a loop over a set of
subjects.


\fn    bool rdf::graph::contains(const ns &uri) const
\brief Does the graph contain a URI in the specified namespace?

\param[in] uri The namespace to check for.

\retval true  If the graph contains a URI in the specified namespace.
\retval false If the graph does not contain a URI in the specified namespace.


\fn    rdf::graph &rdf::graph::set_base(const std::string &aBase)
\brief Set the base URI for the graph.

\param[in] aBase The base URI of the graph.

\return This graph object (to support method chaining).


\fn    rdf::graph &rdf::graph::add_namespace(const std::string &aPrefix, const std::string &aHref)
\brief Add a namespace to the graph.

\param[in] aPrefix The name of the namespace URI.
\param[in] aHref   The namespace URI.

\return This graph object (to support method chaining).

This is used for generating \\prefix entries in turtle/n3 documents.


\fn    cainteoir::rdf::graph &cainteoir::rdf::graph::add_namespace(const cainteoir::rdf::ns &ns)
\brief Add a namespace to the graph.

\param[in] ns The namespace URI.

\return This graph object (to support method chaining).

This is used for generating \\prefix entries in turtle/n3 documents.


\fn    cainteoir::rdf::graph &cainteoir::rdf::graph::operator<<(const cainteoir::rdf::ns &ns)
\brief Add a namespace to the graph.

\param[in] ns The namespace URI.

\return This graph to support method chaining.

This is used for generating \\prefix entries in turtle/n3 documents.


\fn    rdf::graph &rdf::graph::add_prefix(const std::string &aPrefix)
\brief Add namespaces in an RDFa \\prefix attribute.

\param[in] aPrefix The RDFa prefix string containing the namespaces to add.

\return This graph object (to support method chaining).

This is used for generating \\prefix entries in turtle/n3 documents.


\addtogroup rdf
\{

\fn    const rdf::uri cainteoir::rdf::href(const std::string &aHref)
\brief Convert a href into a URI object.

\param[in] aHref The href to convert.

\return The href as a URI object.

\}


\fn    const rdf::uri rdf::graph::genid()
\brief Generate a new blank node.

\return A blank node that is unique for this graph.


\fn    std::shared_ptr<const rdf::uri> rdf::graph::curie(const std::string &aCurie)
\brief Convert a CURIE into a URI object.

\param[in] aCurie The CURIE to convert.

\return The CURIE as a URI object.


\fn    bool rdf::graph::statement(const rdf::uri &aSubject, const rdf::uri &aPredicate, const rdf::uri &aObject)
\brief Add an RDF statement to the graph.

\param[in] aSubject   The subject of the statement.
\param[in] aPredicate The predicate of the statement.
\param[in] aObject    The object of the statement.

\retval true  If the statement was added to the graph.
\retval false If the statement was not added to the graph.

This enforces the RDF requirement that a predicate cannot be a blank node.


\fn    bool rdf::graph::statement(const rdf::uri &aSubject, const rdf::uri &aPredicate, const rdf::literal &aObject)
\brief Add an RDF statement to the graph.

\param[in] aSubject   The subject of the statement.
\param[in] aPredicate The predicate of the statement.
\param[in] aObject    The object of the statement.

\retval true  If the statement was added to the graph.
\retval false If the statement was not added to the graph.

This enforces the RDF requirement that a predicate cannot be a blank node.


\addtogroup rdf_selectors
\{

\fn    cainteoir::rdf::query::detail::matches_t<Selector, Value> cainteoir::rdf::query::matches(const Selector &aSelector, const Value &aValue)
\brief Match statements whos selector matches the value.

\param aSelector The selector to extract data from the statement.
\param aValue    The value to match against.

\return A function object for matching triples where \a aSelector returns \a aValue.


\fn    cainteoir::rdf::query::detail::both_t<Selector1, Selector2> cainteoir::rdf::query::both(const Selector1 &a, const Selector2 &b)
\brief Match statements that match both selectors.

\param a The first selector to match a statement against.
\param b The second selector to match a statement against.

\return A function object for matching triples that match both \a a and \a b selectors.

\}
\addtogroup rdf_query
\{

\fn    cainteoir::rdf::query::results cainteoir::rdf::query::select(const TripleStore &metadata, const Selector &selector)
\brief Select statements matching the selector.

\param metadata The subgraph to select statements from.
\param selector The selector used to choose statements in the graph.

\return A subgraph containing all matching statements.


\fn    bool cainteoir::rdf::query::contains(const TripleStore &metadata, const Selector &selector)
\brief Check if the graph contains any of the specified statements.

\param metadata The subgraph to check.
\param selector The selector used to choose statements in the graph.

\retval true  If the graph contains a statement matching the selector.
\retval false If the graph does not contain a statement matching the selector.


\fn    T cainteoir::rdf::query::select_value(const TripleStore &metadata, const Selector &selector)
\brief Select a value matching the selector.

\param metadata The subgraph to select statements from.
\param selector The selector used to choose statements in the graph.

\return The first literal value matching the selector.

\}
\addtogroup rdf
\{

\fn    std::shared_ptr<rdf::formatter> rdf::create_formatter(std::ostream &aStream, rdf::formatter::format_type aFormatType)
\brief Create an RDF serializer.

\param[in] aStream     The output stream to serialize the RDF data to.
\param[in] aFormatType The format to serialize the RDF data as.

\return The formatter object.


\struct cainteoir::rdf::formatter
\brief  An interface for serializing RDF graphs.

\}


\fn    cainteoir::rdf::formatter::~formatter()
\brief Clean up the formatter object.


\fn    cainteoir::rdf::formatter &cainteoir::rdf::formatter::operator<<(const cainteoir::rdf::ns &aNS)
\brief Serialize a namespace.

\param[in] aNS The namespace to serialize.

\return The formatter object (to support method chaining).


\fn    cainteoir::rdf::formatter &cainteoir::rdf::formatter::operator<<(const cainteoir::rdf::uri &uri)
\brief Serialize a URI resource.

\param[in] uri The URI resource to serialize.

\return The formatter object (to support method chaining).


\fn    cainteoir::rdf::formatter &cainteoir::rdf::formatter::operator<<(const cainteoir::rdf::literal &literal)
\brief Serialize a literal resource.

\param[in] literal The literal resource to serialize.

\return The formatter object (to support method chaining).


\fn    cainteoir::rdf::formatter &cainteoir::rdf::formatter::operator<<(const std::shared_ptr<const triple> &statement)
\brief Serialize an RDF statement.

\param[in] statement The statement to serialize.

\return The formatter object (to support method chaining).


\fn    cainteoir::rdf::formatter &cainteoir::rdf::formatter::operator<<(const cainteoir::rdf::graph &aGraph)
\brief Serialize an RDF graph.

\param[in] aGraph The RDF graph to serialize.

\return The formatter object (to support method chaining).


\enum  cainteoir::rdf::formatter::format_type
\brief The format used to serialize the RDF statements as.


\var   cainteoir::rdf::formatter::format_type cainteoir::rdf::formatter::ntriple
\see   http://www.w3.org/TR/rdf-testcases/#ntriples
\brief N-Triple serialization format.


\var   cainteoir::rdf::formatter::format_type cainteoir::rdf::formatter::turtle
\see   http://www.w3.org/TeamSubmission/turtle/
\brief Turtle serialization format.


*/
