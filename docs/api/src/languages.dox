/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2014 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup languages
\{

\struct cainteoir::language::tag
\brief  BCP 47 / RFC 5646 language tag.
\see    http://www.ietf.org/rfc/rfc5646.txt

\}


\fn    cainteoir::language::tag::tag(const std::string &l, const std::string &e, const std::string &s, const std::string &r, const std::string &v, const std::string &p)
\brief Create a language tag object.

\param[in] l The primary language code.
\param[in] e The extended language code.
\param[in] s The writing script code.
\param[in] r The region code.
\param[in] v The variant code.
\param[in] p The private-use code.


\var   cainteoir::language::tag::lang
\brief ISO 639 language code (primary language).


\var   cainteoir::language::tag::extlang
\brief ISO 639 language code (extended language).


\var   cainteoir::language::tag::script
\brief ISO 15924 script code.


\var   cainteoir::language::tag::region
\brief ISO 3166 or UN M.49 region code.


\var   cainteoir::language::tag::variant
\brief IANA variant subtag.


\var   cainteoir::language::tag::private_use
\brief An application-specific custom subtag.


\addtogroup languages
\{

\fn    cainteoir::language::tag cainteoir::language::make_lang(const std::string &code)
\see   http://www.ietf.org/rfc/rfc5646.txt
\brief Extract language tag information from a BCP 47 language id.

\param[in] code The language identifier, e.g. "es-MX".

\return The extracted language, script and country codes.


\fn    bool cainteoir::language::operator==(const tag &a, const tag &b)
\brief Compare two language tags for equality.

\param[in] a The fist language tag to compare.
\param[in] b The second language tag to compare.

\retval true  If the language tags match.
\retval false If the language tags do not match.


\struct cainteoir::languages
\brief  Helper for localizing language tags.

\}


\fn    const char *cainteoir::languages::language(const lang::tag &id) const
\brief Get the translated ISO 639 language code.

\param[in] id The localized tag to localize.

\return The localized name.


\fn    const char *cainteoir::languages::script(const lang::tag &id) const
\brief Get the localized ISO 15924 script code.

\param[in] id The language tag to localize.

\return The localized name.


\fn    const char *cainteoir::languages::region(const lang::tag &id) const
\brief Get the localized ISO 3166 region code.

\param[in] id The language tag to localize.

\return The localized name.


\fn    std::string cainteoir::languages::operator()(const std::string & langid)
\brief Get the localized name of the language.

\param[in] langid The language tag to localize.

\return The localized name.


*/
