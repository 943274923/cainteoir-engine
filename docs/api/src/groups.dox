/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2014 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**

\defgroup archives Archives
\brief    Support for reading the content of archive files.


\defgroup audio Audio
\brief    Manage writing audio data to an audio device or file.


\defgroup buffers Buffers
\brief    Magage data or string buffers.


\defgroup encoding Character Encoding
\brief    Helpers for working with UTF-8 and other character encodings.


\defgroup context_analysis Context Analysis
\ingroup  text_to_phonemes
\brief    Perform context analysis on text events to associate meaning to them.


\defgroup css CSS
\brief    Cascading Style Sheet implementation.

This provides an implementation of the W3C Cascading Style Sheet specifications
that is focused on providing this information to the text-to-speech engines
(for controlling pronunciation and prosody) and rendering engines to display
the document content in a graphical interface.

Where the Level 3 and Level 4 CSS specifications have been broken out into
separate standards, the API is grouped into a separate module corresponding
to the broken out specification. These modules are:

  1.  \ref css_units "CSS Values and Units";
  2.  \ref css_counter_styles "CSS Counter Styles".


\defgroup css_counter_styles Counter Styles
\ingroup  css
\see      http://www.w3.org/TR/css-counter-styles-3/
\brief    Implementation of the CSS Counter Styles Level 3 specification.

This is the C++ API to CSS counter styles as defined in the CSS Counter
Styles Level 3 specification. The CSS parsing of \@counter-style rules
is handled in the cainteoir::css::style_manager::parse method.


\defgroup css_units Values and Units
\ingroup  css
\see      http://www.w3.org/TR/css3-values/
\brief    Implementation of the CSS Values and Units Level 3 specification.

This is the C++ API to the various unit types for CSS values.


\defgroup decoders Decoding and Decompression
\ingroup  buffers
\brief    Decode encoded data and decompress compressed data.


\defgroup dictionary Pronunciation Dictionary
\brief    Manage pronunciation dictionaries.


\defgroup document_reader Document Reader
\brief    Extract information from a supported document format in a reader-style API.

The document reader makes use of other components of the Cainteoir Engine API
to parse the different document formats as follows:

\htmlinclude document_formats.svg


\defgroup languages Languages
\brief    BCP 47 / RFC 5646 language, region and variant tag processing.


\defgroup mime MIME
\see      http://standards.freedesktop.org/shared-mime-info-spec/0.20/
\brief    MIME type handling.


\defgroup path Path
\brief    A C++ file-system path API.


\defgroup phoneme Phonetic Model
\brief    A C++ representation of phonemes modelled on the International Phonetic Alphabet.


\defgroup phoneme_stream Phoneme Stream
\ingroup  text_to_phonemes
\brief    Resolve a word event sequence into a sequence of phonemes.


\defgroup phonetic_transcription Phonetic Transcription
\brief    Read/write phonemes in a given transcription scheme.


\defgroup ranges Ranges
\brief    C++11 range-based for loop helpers.


\defgroup rdf RDF
\brief    A C++ representation of the RDF data model.


\defgroup rdfns Namespaces
\ingroup  rdf
\brief    Predefined RDF namespaces.


\defgroup rdf_query Query
\ingroup  rdf
\brief    Perform operations on an RDF triple store.


\defgroup rdf_selectors Selectors
\ingroup  rdf
\brief    Selectors used to match RDF triples.


\defgroup text_reader Text Reader
\ingroup  text_to_phonemes
\brief    Text parsing from a document.


\defgroup text_to_phonemes Text to Phonemes
\brief    A framework for converting text (as document events) into phonemes.


\defgroup tts_engines Text-to-Speech Engines
\brief    High-level interface to Text-to-Speech engines and voices.


\defgroup word_stream Word Stream
\ingroup  text_to_phonemes
\brief    Resolve a text event sequence into a sequence of words.


\defgroup xml XML
\brief    XML document processing.


*/
