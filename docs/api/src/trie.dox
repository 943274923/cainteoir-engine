/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2014 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup trie
\{

\class cainteoir::trie_node
\brief A node in a trie data structure.

\}


\fn    cainteoir::trie_node::trie_node(char ch)
\brief Create a trie node object.

\param[in] ch The character associated with the node.


\fn    const trie_node<T> *cainteoir::trie_node::get(char ch) const
\brief Get the child node that is associated with the specified character.

\param[in] ch The character of the child node to locate.

\return The node associated with \p ch, or \c nullptr if no matching node was found.


\fn    trie_node<T> *cainteoir::trie_node::add(char ch)
\brief Add a child node associated with the specified character.

\param[in] ch The character to be associated with the child node.

\return The new node associated with \p ch.


\var   char cainteoir::trie_node::c
\brief The character associated with the node.


\var   std::list<trie_node<T> > cainteoir::trie_node::children
\brief The list of child nodes from this node.


\var   T cainteoir::trie_node::item
\brief The value associated with the node.


\addtogroup trie
\{

\class cainteoir::trie
\brief A trie data structure.

\}


\fn    cainteoir::trie::trie()
\brief Create a trie object.


\fn    T &cainteoir::trie::insert(const cainteoir::buffer &str)
\brief Insert a new item into the trie object.

\param[in] str The string index of the item.

\return A reference to the inserted item.


\fn    void cainteoir::trie::insert(const cainteoir::buffer &str, const T &value)
\brief Insert a new item into the trie object.

\param[in] str   The string index of the item.
\param[in] value The item to be inserted.


\fn    const T &cainteoir::trie::lookup(const cainteoir::buffer &str, const T &no_match) const
\brief Lookup an item by its indexed name.

\param[in] str      The string index of the item.
\param[in] no_match The value to return if an item does not exist at the string index.

\return The matching entry value.


\fn    const trie_node<T> *cainteoir::trie::root() const
\brief Get the root node.

\return The root node of the trie object.


*/
