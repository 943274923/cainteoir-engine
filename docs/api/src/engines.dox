/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup tts_engines
\{

\struct cainteoir::tts::speech
\brief  Manage a speech synthesis session.

\}


\fn    cainteoir::tts::speech::~speech()
\brief Clean up the speech object.


\fn    bool cainteoir::tts::speech::is_speaking() const
\brief Is the session currently speaking?

\retval true  If the session is currently speaking.
\retval false If the session is not currently speaking.


\fn    void cainteoir::tts::speech::stop()
\brief Immediately stop the session from speaking.


\fn    void cainteoir::tts::speech::wait()
\brief Wait until the session has finished speaking.


\fn    double cainteoir::tts::speech::elapsedTime() const
\brief Get the time elapsed since starting this session.

\return The time elapsed since starting this session.


\fn    double cainteoir::tts::speech::totalTime() const
\brief Get the (estimated) total time for this session.

\return The (estimated) total time for this session.


\fn    double cainteoir::tts::speech::completed() const
\brief Get the percentage of this session completed.

\return The percentage of this session completed.


\fn    size_t cainteoir::tts::speech::position() const
\brief Get the current speaking position in the document for this session.

\return The current speaking position in the document for this session.


\fn    std::string cainteoir::tts::speech::error_message() const
\brief Get the error message associated with this session.

\return The error message associated with this session.

If there is no error message associated with this session, the return value
is empty.


\enum  cainteoir::tts::parameter::type
\brief Identifies the parameter.


\var   cainteoir::tts::parameter::type cainteoir::tts::parameter::rate
\brief How fast the voice speaks.


\var   cainteoir::tts::parameter::type cainteoir::tts::parameter::volume
\brief The volume of the voice audio.


\var   cainteoir::tts::parameter::type cainteoir::tts::parameter::pitch
\brief The base pitch to render the voice at.


\var   cainteoir::tts::parameter::type cainteoir::tts::parameter::pitch_range
\brief How varied the pitch is due to prosody variations.


\var   cainteoir::tts::parameter::type cainteoir::tts::parameter::word_gap
\brief How long to pause between each word.


\var   cainteoir::tts::parameter::type cainteoir::tts::parameter::number_of_parameters
\brief The number of parameters in the parameter type enumeration.


\addtogroup tts_engines
\{

\class cainteoir::tts::parameter
\brief A configurable option of a text-to-speech engine or voice.

\}


\fn    cainteoir::tts::parameter::~parameter()
\brief Clean up the parameter object.


\fn    const char *cainteoir::tts::parameter::name() const
\brief Get the name of the parameter.

\return The name of the parameter.


\fn    const char *cainteoir::tts::parameter::units() const
\brief Get the units the parameter is stored in.

\return The units the parameter is stored in.


\fn    int cainteoir::tts::parameter::minimum() const
\brief Get the minimum value for the parameter.

\return The minimum value for the parameter.


\fn    int cainteoir::tts::parameter::maximum() const
\brief Get the maximum value for the parameter.

\return The maximum value for the parameter.


\fn    int cainteoir::tts::parameter::default_value() const
\brief Get the default value for the parameter.

\return The default value for the parameter.


\fn    int cainteoir::tts::parameter::value() const
\brief Get the current value for the parameter.

\return The current value for the parameter.


\fn    bool cainteoir::tts::parameter::set_value(int value)
\brief Set the current value for the parameter.

\param[in] value The new value of the parameter.

\retval true  If the parameter value was changed.
\retval false If the parameter value was not changed.


\addtogroup tts_engines
\{

\struct cainteoir::tts::engines
\brief  Manages the available text-to-speech engines.

\}


\fn    cainteoir::tts::engines::engines(rdf::graph &metadata)
\brief Create a new text-to-speech engine manager object.

\param[out] metadata The RDF graph to add engine and voice metadata to.


\fn    cainteoir::tts::engines::~engines()
\brief Clean up the engines.


\fn    bool tts::engines::select_voice(const rdf::graph &aMetadata, const rdf::uri &aVoice)
\brief Change the voice used to read the documents.

\param[in] aMetadata The RDF graph containing the engine and voice metadata.
\param[in] aVoice    The voice to use to read the documents.

\retval true  If the voice was changed.
\retval false If the voice was not changed.


\fn    const cainteoir::rdf::uri &cainteoir::tts::engines::voice() const
\brief Get the currently active voice.

\return The currently active voice.


\fn    std::shared_ptr<tts::speech> cainteoir::tts::engines::speak(std::shared_ptr<audio> out, const document::range_type &aRange)
\brief Speak the specified document.

\param[in] out    The audio output device (for reading) or file (for recording).
\param[in] aRange The start and end points of the document to read.

\return The object associated with this speech session.


\fn    std::shared_ptr<tts::parameter> tts::engines::parameter(tts::parameter::type aType)
\brief Get the specified parameter associated with the active engine.

\param[in] aType The parameter to get.

\return The specified parameter.


*/
