/* vim: set ft=cpp.doxygen:
 *
 * Copyright (C) 2012-2013 Reece H. Dunn
 *
 * This API documentation is licensed under the CC BY-SA 2.0 UK License.
 */
/**


\addtogroup xml
\{

\fn    const char * cainteoir::xml::lookup_entity(const detail::entity_set **entities, const cainteoir::buffer &data)
\brief Find the predefined entity in the entity table.

\param[in] entities The entity table to use to resolve the entity.
\param[in] data     The name of the entity without the surruonding & and ; characters.

\return The UTF-8 encoded characters represented by the named entity, or null if it does not exist.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::dc
\brief Dublin Core Elements namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::dcam
\brief Dublin Core Abstract Model namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::dct
\brief Dublin Core Terms namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::dtb
\brief Daisy Talking Book namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::epub
\brief ePub (Open Package Specification) namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::foaf
\brief Friend of a Friend namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::html40
\brief XML-based Hyper-Text Markup Language 4.0 (MS Word HTML) namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::media
\brief ePub Media Overlays namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::ncx
\brief Navigation Control File namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::ocf
\brief Open Container Format namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::opf
\brief Open Packaging Format namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::owl
\brief Ontology Web Language namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::pkg
\brief ePub Package namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::rdf
\brief Resource Description Framework namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::rdfa
\brief RDF/attributes namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::rdfs
\brief RDF Schema namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::skos
\brief Simple Knowledge Organization System namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::smil
\brief Synchronized Multimedia Integration Language namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::ssml
\brief Speech Synthesis Markup Language namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::tts
\brief Cainteoir Text-to-Speech namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::xhtml
\brief XML-based Hyper-Text Markup Language namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::xml
\brief eXtensible Markup Language namespace.


\var   const cainteoir::xml::ns cainteoir::xml::xmlns::xsd
\brief XML Schema namespace.

\struct cainteoir::xml::namespaces
\brief  Manage a set of XML namespaces.

\}


\fn    cainteoir::xml::namespaces::namespaces()
\brief Initialize a new namespace manager object.


\fn    cainteoir::xml::namespaces &cainteoir::xml::namespaces::add_namespace(const std::string &aPrefix, const std::string &aHref)
\brief Add a namespace to the current scope.

\param[in] aPrefix The prefix of the namespace.
\param[in] aHref   The URI of the namespace.

\return This namespace manager object (to support method chaining).


\fn    cainteoir::xml::namespaces &cainteoir::xml::namespaces::add_namespace(const cainteoir::buffer &aPrefix, const std::shared_ptr<cainteoir::buffer> &aHref)
\brief Add a namespace to the current scope.

\param[in] aPrefix The prefix of the namespace.
\param[in] aHref   The URI of the namespace.

\return This namespace manager object (to support method chaining).


\fn    cainteoir::xml::namespaces &cainteoir::xml::namespaces::add_namespace(const ns &aNS)
\brief Add a namespace to the current scope.

\param[in] aNS The namespace to add.

\return This namespace manager object (to support method chaining).


\fn    void cainteoir::xml::namespaces::push_block()
\brief Add a new scope block.


\fn    void cainteoir::xml::namespaces::pop_block()
\brief Remove a new scope block.

All namespaces associated with the top-most scope block are removed.


\fn    std::string cainteoir::xml::namespaces::lookup(const std::string &aPrefix) const
\brief Resolve the namespace prefix to a URI.

\param[in] aPrefix The namespace prefix to resolve.

\return The URI associated with the specified namespace prefix.


\fn    std::string cainteoir::xml::namespaces::lookup(const cainteoir::buffer &aPrefix) const
\brief Resolve the namespace prefix to a URI.

\param[in] aPrefix The namespace prefix to resolve.

\return The URI associated with the specified namespace prefix.


\addtogroup xml
\{

\var   const cainteoir::xml::context::entry cainteoir::xml::unknown_context
\brief The specified element/attribute was not found.


\var   const cainteoir::xml::context::entry cainteoir::xml::base_attr
\brief The \@xml:base attribute.


\var   const cainteoir::xml::context::entry cainteoir::xml::id_attr
\brief The \@xml:id attribute.


\var   const cainteoir::xml::context::entry cainteoir::xml::lang_attr
\brief The \@xml:lang attribute.


\var   const cainteoir::xml::context::entry cainteoir::xml::space_attr
\brief The \@xml:space attribute.


\var   const std::initializer_list<const cainteoir::xml::context::entry_ref> cainteoir::xml::attrs
\brief Attributes in the XML namespace.


\struct cainteoir::xml::context
\brief  Manage looking up XML elements and attributes.

\}


\fn    cainteoir::xml::context::context()
\brief Create an empty context manager object.


\fn    cainteoir::xml::context::context(const std::string &aNS, const std::initializer_list<const entry_ref> &entries, buffer::match_type match)
\brief Create a context manager object.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The elements or attributes associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    cainteoir::xml::context::context(const ns &aNS, const std::initializer_list<const entry_ref> &entries, buffer::match_type match)
\brief Create a context manager object.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The elements or attributes associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    void cainteoir::xml::context::set(const std::string &aNS, const std::initializer_list<const entry_ref> &entries, buffer::match_type match)
\brief Set the context entries to use for the specified namespace.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The elements or attributes associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    void cainteoir::xml::context::set(const ns &aNS, const std::initializer_list<const entry_ref> &entries, buffer::match_type match)
\brief Set the context entries to use for the specified namespace.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The elements or attributes associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\var   const cainteoir::xml::context::entry *cainteoir::xml::context::lookup(const std::string &aNS, const cainteoir::buffer &aNode) const
\brief Find the entry for the specified element or attribute.

\param[in] aNS   The namespace of the element/attribute.
\param[in] aNode The element/attribute name.

\return The entry associated with the element/attribute.

\addtogroup xml
\{

\struct cainteoir::xml::reader
\brief  Parse an XML document.

\}


\var   cainteoir::xml::reader::reader(const std::shared_ptr<cainteoir::buffer> &aData, const char *aDefaultEncoding, const detail::entity_set *aPredefinedEntities[52])
\brief Create a new XML document reader.

\param[in] aData               The XML document contents.
\param[in] aDefaultEncoding    The character encoding to use by default.
\param[in] aPredefinedEntities The DTD entities to use by default.


\fn    void cainteoir::xml::reader::set_predefined_entities(const entity_set *aPredefinedEntities[52])
\brief Set the DTD entities to use by default.

\param[in] aPredefinedEntities The DTD entities to use by default.


\var   bool cainteoir::xml::reader::read()
\brief Read the next node in the XML document.

\retval true  If the next node was read.
\retval false If there are no more nodes to read.


\fn    const cainteoir::rope &cainteoir::xml::reader::nodeValue() const
\brief Get the content of the current node.

\return The content of the current node.


\fn    const cainteoir::buffer &cainteoir::xml::reader::nodeName() const
\brief Get the name of the current node.

\return The name of the current node.


\fn    const cainteoir::buffer &cainteoir::xml::reader::nodePrefix() const
\brief Get the namespace prefix of the current node.

\return The namespace prefix of the current node.


\fn    std::string cainteoir::xml::reader::namespaceUri() const
\brief Get the namespace URI of the current node.

\return The namespace URI of the current node.


\fn    cainteoir::xml::reader::node_type cainteoir::xml::reader::nodeType() const
\brief Get the type of the current node.

\return The type of the current node.


\fn    bool cainteoir::xml::reader::isPlainText() const
\brief Is the document plain text?

\retval true  If the document is plain text.
\retval false If the document is not plain text.


\fn    const xml::context::entry *cainteoir::xml::reader::context() const
\brief Get the context entry for the current node.

\return The context entry for the current node.


\fn    void cainteoir::xml::reader::set_nodes(const std::string &aNS, const std::initializer_list<const xml::context::entry_ref> &entries, buffer::match_type match)
\brief Set the context entries for resolving the namespace's elements.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The elements associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    void cainteoir::xml::reader::set_nodes(const ns &aNS, const std::initializer_list<const xml::context::entry_ref> &entries, buffer::match_type match)
\brief Set the context entries for resolving the namespace's elements.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The elements associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    void cainteoir::xml::reader::set_attrs(const std::string &aNS, const std::initializer_list<const xml::context::entry_ref> &entries, buffer::match_type match)
\brief Set the context entries for resolving the namespace's attributes.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The attributes associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    void cainteoir::xml::reader::set_attrs(const ns &aNS, const std::initializer_list<const xml::context::entry_ref> &entries, buffer::match_type match)
\brief Set the context entries for resolving the namespace's attributes.

\param[in] aNS     The namespace to associate the entries with.
\param[in] entries The attributes associated with the namespace.
\param[in] match   The comparison method to use (case sensitive or insensitive).


\fn    bool cainteoir::xml::reader::set_encoding(const char *encoding)
\brief Change the character encoding used by the parser.

\param[in] encoding The character encoding to change to.

\retval true  If the character encoding was changed.
\retval false If the character encoding was not changed.


\fn    const char *cainteoir::xml::reader::current() const
\brief Get the current position in the XML document.

\return The current position in the XML document.


\fn    void cainteoir::xml::reader::set_begin_tag_type(begin_tag_type aType)
\see   cainteoir::xml::begin_tag_type
\brief Set the way begin tags are interpreted.

\param[in] aType The way begin tags are to be interpreted.


\namespace cainteoir::xml::xmlns
\brief     Predefined XML namespaces.


\addtogroup xml
\{

\struct cainteoir::xml::ns
\brief  Manages an XML namespace.

\}


\var   cainteoir::xml::ns::prefix
\brief The default prefix for the namespace.


\var   cainteoir::xml::ns::href
\brief The URI of the namespace.


\var   cainteoir::xml::ns::ns(const std::string &aPrefix, const std::string &aHref)
\brief Create a new XML namespace object.

\param[in] aPrefix The prefix to use for the namespace.
\param[in] aHref   The URI of the namespace.


\addtogroup xml
\{

\var   const cainteoir::xml::detail::entity_set *cainteoir::xml::xml_entities[52]
\brief XML 1.0 entities.


\var   const cainteoir::xml::detail::entity_set *cainteoir::xml::html_entities[52]
\brief HTML 5.0 entities.

\}


\struct cainteoir::xml::context::entry
\brief  Identifies an XML element or attribute.


\var   cainteoir::xml::begin_tag_type cainteoir::xml::context::entry::begin_tag_type
\brief Denotes whether the element is self-closing or not.


\var   const cainteoir::css::styles *cainteoir::xml::context::entry::styles
\brief The CSS styles associated with the element.


\struct cainteoir::xml::context::entry_ref
\brief  Associates an element/attribute name with its entry object.


\var   cainteoir::xml::context::entry_ref::name
\brief The name of the element/attribute.


\var   cainteoir::xml::context::entry_ref::data
\brief The entry data associated with the element/attribute.


\enum  cainteoir::xml::reader::node_type
\brief Specifies the type of the XML node.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::beginTagNode
\brief An start of an element.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::endTagNode
\brief An end of an element.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::beginProcessingInstructionNode
\brief The start of a processing instruction.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::endProcessingInstructionNode
\brief The end of a processing instruction.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::commentNode
\brief A comment.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::cdataNode
\brief A CDATA section.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::textNode
\brief A block of text.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::error
\brief An error occurred parsing the XML; the XML may be malformed.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::doctypeNode
\brief A DOCTYPE.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::attribute
\brief An attribute on an element or processing instruction.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::endOfData
\brief The document has no more XML data.


\var   cainteoir::xml::reader::node_type cainteoir::xml::reader::dtdEntity
\brief An ENTITY reference declaration.


\addtogroup xml
\{

\enum  cainteoir::xml::begin_tag_type
\brief Specifies how begin tags are interpreted.


\var   cainteoir::xml::begin_tag_type cainteoir::xml::open
\brief The begin tag opens an element block.


\var   cainteoir::xml::begin_tag_type cainteoir::xml::open_close
\brief The begin tag creates a self-contained element block.

This makes \<node\> behave the same way as \<node/\>, allowing
support for void elements as per HTML§12.1.2.


\fn    std::shared_ptr<cainteoir::xml::reader> cainteoir::createXmlReader(const std::shared_ptr<buffer> &aData, const char *aDefaultEncoding)
\brief Create a new XML document reader.

\param[in] aData            The XML document contents.
\param[in] aDefaultEncoding The character encoding to use by default.

This function moves the reader to the first open tag element, so an XML document
consumer does not have to do this itself.

\}


\addtogroup xml
\{

\fn    const char *cainteoir::xml::node_type_name(xml::reader::node_type aType)
\brief Get the display name for the node type.

\param[in] aType The XML node type.

\return The display name for the node type.

\}


*/
